				Nest JS
.....................................................................................

What is Nest.js?
   Nest.js is a framework for building efficient,scalable Node.js server-side applications.


Server side apps Types:
1.Monolith - Old of way building distributed apps
2.Microservices -Modern way of building distributed apps.

Nest.js can be used to build both applications.

Our focus mostly is Microservice based apps.

Micro service is collection of independant apps talks each other for exchaning data.

Apps  are collection of apis.

In Genernal we can create different types "api"

API means Application programming interface.

API is implemented in many ways.

API is implmented via object oriented models like classes or via functional programming.


Objects encapsulate apis.

API are used to carry out biz logic like "fetching data,saving,updating,deleting,sorting,filtering,"

Objects are hosted on runtimes, the other applications like other apis or userinterface apps like browsers,mobile apps may try to communicate those objects.

Based on Communications(Communication Protocals) apis are classified:

There are many protocals.

HTTP
HTTP2
TCP
UDP
...................................................................................
 		         Nest.is Development Arch


Nest apps can be written in plain js or with object oriented js via Typescript.

				  Nest App
				     |
			-------------------------------
			|                             |
		      Javascript                   Typescript


Note: Nest with Typescript is highly recommended.


Popular Server side(Micro/monolithic) frameworks

1.express
2.hapi
3.fastify

4.moleculer
5.loopback
....................................................................................
 There are lot of  frameworks available in the market but lacks common problems like 
 popular design patterns like MVC,Dependency,Decorator based,Class Based object  oriented 
 You can see all  best features and design patterns available in the front frameworks
 like angular,react,vue

  if you take angular is the best framework which incorporates all industry standard design patterns like MVC,dependency injection,class and interface based,decorators based,modularity

  What if i want the angular like framework in server side , there was no frame work but now we have 

			 "Birth of NEST.js"


Nest.js is server side framework for building monolithic,microservices based framework built on the industry standard design patterns like "MVC","DI","Factory",
"SingleTon", and Pure object oriented features such as classes,interfaces,strong typing,polmorphism,inheritance etc....



	  Nest.js is replica of Angular in the Server side
		  Nest inspired from "Angular"


Features of Nest.js:

1.Nest is MVC Framework
2.Nest is Dependency Injection framework
3.Nest is Modular framework - ES 6 based modularity and Logical Modularity.
4.NEST is pure class and interface based
5.Nest supports Decortors
6.Nest supports all typescript features
7.Nest provides infrastructure to build any type of apis 
8.Nest supports "reactive programming" via rxjs for advanced async stream   based programming 

if you are going build nest apps, we have to select language, our choice is Typescript.
...................................................................................
			  Typescript 
....................................................................................
What is typescript?
   Type script is the programming language to build "object oriented" java script applications.

What is difference between java script and typescript?

What is javascript?
  Java script is also programming language.
 Javascript is "object based, functional style programming language.


Pl :
  - classified based on type system

1.strongly/static  typed pl
  -the type of variable is known /verified during compile time -  java,c++
 int a =10
 a="hello"

2.weakly/dynamic typed pl
  - the type of variable is known at runtime only- type of variable can be changed during runtime. - js
 let a=10  type of - number
 a="hello" type of - string


Object Oriented Principles:
...........................

1.Abstraction
2.Encapsulation
3.Hierarchy
4.Typing
5.Modularity
----------------------
6.Concurrency
7.Persistency

if any language follows the first 5 prinicples 100% , those languages are called object oriented programming.

java script does not follow the first 5 principles , so it is called as object based languge.


		JavaScript is not object oriented
		Javascript  is not strongly typed 

Drawbacks of dynamic typing:
    -We cant build enterprise consistent application.

-Object based 
    if we  want to design , object oriented system in js not possible.


Why javascript was created?

  Javascript was created for process html pages.

1989 - Web Project was started   

1990 -  The first webserver,Browser was created

1994 - Netscap started

1995 - The first netscap navigator came to access web pages 

1996 - Netscap decided to put java inside web browser.

Netscap decided to build client side web technoloy- once html is rendered into web browser

how to change that html on fly. 

Netscap decided to create a new programming language, who recurited Brendan Eich
,the programmer , asked to create new programming language for netscap navigator.

-Objective of Project

-It should be like java but it should not be java -light weight - scripting
-deadline is 10 days.

Time line:

1.javascript project started 1995
1.first name of the language was "Mocha"
2.language was renamed to "Live Script" -1996
3.language was renamed to "java Script" -1996
............................................................................................
				 ECMA
...................................................................................

Ecma International is an industry association dedicated to the standardization of information and communication systems.

After language ready, which was submitted to standard body "ECMA international"

1996---1997 : JS 1.0 =>ES 1.0

1997- 1998 :  ES 2.0: It did not come

1999 :  ES 3

2007 : ES 4

2008 : ES 5
.....

2012-2015 : ES 6
........
2016  ONWARDS : es 7,es 8, ............

.....................................................................................
			2008 - Introduction of  Node.js : Enter prise Javascript
.....................................................................................
in order to build enterprise javascript apps, community started thinking about "Object oriented Models".
                    How to introduce object oriented features into language.
.....................................................................................
Fundamentally js is object based,type less language, then it is difficult to build object oriented systems.

in order to create better javascript, 2009, The project was started to make javascript looks like other object oriented langugages.
 
 - classes,interfaces,modules.... : Coffee script (intension was to introduce object oriented features like classes,interfaces).

YOu write code in coffeescript

Employee.coffee

class Employee {

}
compiler - coffee Employee.coffee
|
Employee.js - compiled code -pure javascript 
|
run on browser

Coffee script had issues still - Type system- No strongly typed.


2010, Microsoft started project to create "object oriented javascript" using C#

Objective of MS Project:

 -Add Type System - Strong Typing
 -Classes
 -Modules
 -interfaces
 -encapulation keywords
 .......
C# ---compiler------plain javascript.

MS Failed to port this project to public because

Problems with C#
 1.PORTABLITY.
 2.COMPLEXITY
.....................................................................................
..............................................................................................

2012 - ECMA released new javascript spec (ES 6) in which They introduced
  
   - classes
   - let 
   - const
   - advanced object literals
   - Promises
  etc..........

MS decided to rewrite Typed Javascript project based "ECMA 6 Standards".

MS Started redesigning the whole project, target ecma 6 as base language.

{ES 6 + Static Typing + added new extra fetures} => The brith of Typescript.


Arch of TS:

					
				      TS language
					    |
					  ES 6
					    |
					  ES 5


Typescript----compile----Plain javascript

Typescript is strongly typed, object oriented  javascript.

Now you can use type script to build better object oriented systems using javascript.

TS is not compititor or replacer for javascript but it complements js.

/////////////////////////////////////////////////////////////////////////////////////////

Type script is a typed superset of javascript that compiles to plain javascript

                  any browser,any host, any os, any device

/////////////////////////////////////////////////////////////////////////////////////

				Setup Ts project

Lab:

Create Ts Project.
How to write ts programs
How to compile ts programs
How to run compiled ts programs

G:\Marsh\nodejs>mkdir tsapps

G:\Marsh\nodejs>cd tsapps

G:\Marsh\nodejs\tsapps>mkdir src

G:\Marsh\nodejs\tsapps>npm init --ye
^CTerminate batch job (Y/N)? y

G:\Marsh\nodejs\tsapps>npm init --yes
Wrote to G:\Marsh\nodejs\tsapps\package.json:

{
  "name": "tsapps",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": ""
}


npm install typescript --save-dev


tsapps/tsconfig.json
{
    "compilerOptions": {
        "outDir": "build",
        "watch": true,
        "target": "ES6",
        "noEmitOnError": true
    },
    "exclude": [
        "node_modules"
    ],
    "files": [
        "src/index.ts"
  
How to compile the code?

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "compile":"tsc --watch"
  },

npm run compile
  

How to run code

node build/index.js
....................................................................................

       	 Typescript language fundamentals


How to declare variables and how to use data types?

syntax:

 let|const|var variableName:DataType = value

 let|const|var variableName = value


Data types:
...........
Category of types
1.Primitive types
 number
 string
 boolean

2.Reference types
 objects
 array  

3.Advanced Types
 void
 undefined
 any
 unknown
 function
 enum

src/index.ts
let firstName: string = "Subramanian"
let salary: number = 10000
let isActive: boolean = true

console.log(`firstName ${firstName} Salary ${salary} isActive ${isActive}`)

...................................................................................
			Identifying Type errors
...................................................................................


let firstName:string = "ram"

firstName =333


Compile time error:
src/index.ts:3:1 - error TS2322: Type 'number' is not assignable to type 'string'.

3 firstName =333
  ~~~~~~~~~

[5:59:35 PM] Found 1 error. Watching for file changes.
.....................................................................................
			Category of Types
.....................................................................................

1.Explicit type
let firstName:string = "ram"

2.Implicit type /Type inference

//here there is explicit type assigned
let age = 18

age ="hello"


src/index.ts:5:1 - error TS2322: Type 'string' is not assignable to type 'number'.

5 age ="hello"
  ~~~

[6:02:14 PM] Found 1 error. Watching for file changes.


Once the variable is declared without any type but assigned value , based on that value type, in future the compiler will assume the same type should be used
.....................................................................................
		              undefined
.....................................................................................

//undefined

//undefined
let a;

a = 0

a="hello"



here no compile time, error , because implicit undefined type, later can be used to initalize any value type.

let b = undefined

b=90

b=333


here no compile time, error , because implicit undefined type, later can be used to initalize any value type.

....................................................................................
				any
....................................................................................

if you dont know the type of variable in advance
if you dont want to force the variable to have particular type

  dont leave variable with "undefined" , instead you give any


let a: any

a = 10
a = "hello"
.....................................................................................
			functions parameters,return  types
....................................................................................

function add(a: number, b: number):number {
    return a + b 
}
console.log(add(10, 10))
// console.log(add("10", 10))


es 6 Default arg:


function add(a: number=0, b: number=0) {
    return a + b
}
console.log(add(10,10))
console.log(add())

i dont want to pass value, still i have skip those, ts introduced a feature called
"optional arg"


function add(a?: number, b?: number) {
    return a + b
}
console.log(add(10,10))
console.log(add())

.....................................................................................
			Multi types -Union Type
.....................................................................................

a variable can hold many types or const values



let gender: "Male" | "Female" | "Third"

gender = "Male"

gender = "Female"

gender = "Third"

// gender="hello"

function process(id: number | string = "", age?: number, gender?: "Male" | "Female" | "Thrid") {
    console.log(id,age,gender)
}

process("133",8,"Male")
process(34,44,"Thrid")

let windowStatus: "Open" | "Close"
windowStatus = "Open"
function Mode(varient: "dark" | "light") {
    console.log(varient)
}
Mode("dark")
Mode("light")
// Mode("theme")

function Person(gender: "Male" | "Female" | "Third" | undefined, active: true | false) {
    console.log(gender, active)
}
Person("Female", true)
Person("Male", false)
.....................................................................................
			Object oriented Programming In TS
.....................................................................................
class declaration
  instance variables , methods
  constructors and parameters
  create instance

class Employee {
    //instance variables
    id: number
    name: string
    salary: number
    //instance methods
    calculateSalary(value: number = 0): number {
        return value * 2
    }

}

function main() {
    //let emp: Employee = new Employee()
    let emp = new Employee()
    console.log(emp.id, emp.name, emp.salary, emp.calculateSalary(340))
}
main()
...................................................................................

How to intialize the instance variables?

1.inside class
  1.1.class directly
  1.2.constructor
2.after object creation
  using reference variable


class Employee {
    //instance variables
    id: number = 1
    name: string = "Subramanian"
    salary: number = 100
    //instance methods
    calculateSalary(value: number = 0): number {
        return value * this.salary
    }

}

function main() {
    //let emp: Employee = new Employee()
    let emp = new Employee()
    console.log(emp.id, emp.name, emp.salary, emp.calculateSalary(22))
}
main()

After Object creation:
class Employee {
    //instance variables
    id: number = 1
    name: string = "Subramanian"
    salary: number = 100
    //instance methods
    calculateSalary(value: number = 0): number {
        return value * this.salary
    }

}

function main() {
    //let emp: Employee = new Employee()
    let emp = new Employee()
    console.log(emp.id, emp.name, emp.salary, emp.calculateSalary(22))
    //new values
    emp.id = 100
    emp.name = 'Murugan'
    emp.salary = 1000
    console.log(emp.id, emp.name, emp.salary, emp.calculateSalary(22))

}
main()
...................

via constructors:
................
class Employee {
    //instance variables
    id: number
    name: string
    salary: number
    constructor(id: number = 1, name: string = "Subramanian", salary: number = 1000) {
        this.id = id
        this.name = name
        this.salary = salary

    }
    //instance methods
    calculateSalary(value: number = 0): number {
        return value * this.salary
    }

}

function main() {
    let emp = new Employee()
    console.log(emp.id, emp.name, emp.salary, emp.calculateSalary(22))
    //new values
    emp.id = 100
    emp.name = 'Murugan'
    emp.salary = 1000
    console.log(emp.id, emp.name, emp.salary, emp.calculateSalary(22))


    emp = new Employee(2, 'Karthik', 333)
    console.log(emp.id, emp.name, emp.salary, emp.calculateSalary(22))

}
main()
.....................................................................................
			
				Encasulation
.....................................................................................

What is encasulation?

To Prevent code sharing from code to another.

code - collection of classes, variables,functions,......

code is represented inside file.

pl provides keywords to ensure that , how  we can allow the code to be shared

TS provides keywords to prevent code sharing
 
 -public - any where
 -private - with in class 
 -protected - with in class + inheritance

only class members are public/private/protected.

if you declare any member(var,methods) => by default is public.



public:
class Employee {
    //instance variables
    //by default all memebers are public
    public id: number
    public name: string
    salary: number
    constructor(id: number = 1, name: string = "Subramanian", salary: number = 1000) {
        this.id = id
        this.name = name
        this.salary = salary

    }
    //instance methods
    public calculateSalary(value: number = 0): number {
        return value * this.salary
    }

}

function main() {
    let emp = new Employee()
    console.log(emp.id, emp.name, emp.salary, emp.calculateSalary(22))
    //new values
    emp.id = 100
    emp.name = 'Murugan'
    emp.salary = 1000
    console.log(emp.id, emp.name, emp.salary, emp.calculateSalary(22))


    emp = new Employee(2, 'Karthik', 333)
    console.log(emp.id, emp.name, emp.salary, emp.calculateSalary(22))

}
main()


private:


class User {
    private userName:string ='admin'
    private password:string = 'admin'

    private auth(){
        return 'something'
    }
}

function main(){
    let user = new User()
    console.log(user.userName ,user.auth())
}
main()

src/index.ts:13:22 - error TS2341: Property 'userName' is private and only accessible within class 'User'.

13     console.log(user.userName ,user.auth())
                        ~~~~~~~~

src/index.ts:13:37 - error TS2341: Property 'auth' is private and only accessible within class 'User'.

13     console.log(user.userName ,user.auth())
                                       ~~~~


src/index.ts:9:22 - error TS2341: Property 'userName' is private and only accessible within class 'User'.

9     console.log(user.userName)
                       ~~~~~~~~

....................................................................................
			   Reducing code inside class
...................................................................................

variables types:

1.instance variable
  variable declared inside class
2.local variables
  variables are declared inside method(including constructor)
  or method args / constructor args


class Employee {
    //instance variables
    public id: number
    public name: string
    salary: number
    //id,name are local variables
    constructor(id: number = 1, name: string = "Subramanian", salary: number = 1000) {

        //instancevariable=localvariable
        this.id = id
        this.name = name
        this.salary = salary

    }
    //instance methods
    public calculateSalary(value: number = 0): number {
        return value * this.salary
    }

}

function main() {
    let emp = new Employee()
    console.log(emp.id, emp.name, emp.salary, emp.calculateSalary(22))

}
main()


Note:

In the above code 

 =>we have declared instance variables
 =>we have initalized those variables inside constructors.

By Using encapsulation keywords(public and private) we can reduce code.


Step 1:

remove all class declarations
class Employee {
      constructor(id: number = 1, name: string = "Subramanian", salary: number = 1000) {
       //instancevariable=localvariable
        this.id = id
        this.name = name
        this.salary = salary

    }
    //instance methods
    public calculateSalary(value: number = 0): number {
        return value * this.salary
    }

}

Step 2: 
 "Convert constructor local variables into instance variables

 constructor(id: number = 1, name: string = "Subramanian", salary: number = 1000){}

 Solution:
  infront of variables just add either "public" or "private"
      constructor(public id: number = 1, public name: string = "Subramanian", public salary: number = 1000) {
       //instancevariable=localvariable
        this.id = id
        this.name = name
        this.salary = salary

    }

Step 3:
  inside constructor leftside and right same variables so we can remove , intialization itself.

class Employee {
    constructor(public id: number = 1, public name: string = "Subramanian", public salary: number = 1000) {}
    //instance methods
    public calculateSalary(value: number = 0): number {
        return value * this.salary
    }
}

function main() {
    let emp = new Employee()
    console.log(emp.id, emp.name, emp.salary, emp.calculateSalary(22))

}
main()
....................................................................................
			  Hierachy
...................................................................................

Object Relationship:

1.has-a 
2.is-a 


HAS-A : 
  Depedency injection....

class Address {
} 
class Employee {
   
}

class Address {
    constructor(public street: string = "street", public city: string = "city") { }
}

class Employee {

    constructor(public id: number = 1, public name: string = "Subramanian",
        public salary: number = 1000, public address?: Address) { }
}

function main() {
    let emp = new Employee()
    console.log(emp.id, emp.name, emp.salary, emp.address)

    emp = new Employee(3, 'Karthik', 333, new Address('10th street', 'Coimbatore'))
    console.log(emp.id, emp.name, emp.salary,emp.address.city,emp.address.street)

}
main()
....................................................................................
class TodoService {
    constructor() { }
    findAll() {
        return "todos"
    }
}
class TodoController {
    constructor(private todoService: TodoService) {
        this.todoService = todoService
     }

    findAll() {
        return this.todoService.findAll()
    }
}

function main() {
    let todCtrl = new TodoController(new TodoService())
    console.log(todCtrl.findAll())
}
main()
...................................................................................
				Inheritance
....................................................................................

Types of inheritance implementation:

1.class based inheritance
2.interface based inheritance



1.class based
class Account {
    constructor() {

    }
    protected deposit() {
        return 0
    }

}
class SavingsAccount extends Account {
    constructor() {
        super()
    }
    public deposit(): number {
        return 100
    }
}

function main() {
    let sb = new SavingsAccount()
    console.log(sb.deposit())
}
main()

interfaces
..........

1.interfaces are common classes
2.having only declaration
3.can act as super type
4.we can have multiple implementations


interface OnInit {
    init(): void
}
interface onDestroy {
    destroy(): void
}

class CustomerController implements OnInit, onDestroy {
    init(): void {
        console.log('CustomerController-init')
    }
    destroy(): void {
        console.log('CustomerController-destory')
    }
}


class OrderController implements OnInit, onDestroy {
    init(): void {
        console.log('OrderController-init')
    }
    destroy(): void {
        console.log('OrderController-destory')
    }
}


function main() {
    let custrl = new CustomerController()
    let orderCtrl = new OrderController()
    custrl.init()
    custrl.destroy()

    orderCtrl.init()
    orderCtrl.destroy()
}
main()
.....................................................................................
			 Generics and Arrays
....................................................................................
















