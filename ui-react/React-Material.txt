

				React,Redux,Next.js
.....................................................................................

What is react?
 A JavaScript library for building user interfaces.

What is User interface and  what are the user interface technologies?

Where User is going to interact.

Types of user interfaces

1.Mobile App
2.Desk top applications
3.Web apps using browsers
4.Device apps

Web apps:
........

1.Client side web
  Client apps are executed in the client side , browser apps.

1.1. Single page web apps

2.Server side web

  Server apps are executed at server, client will get only response.

1.Static content web app -1989-1995 - still we use this technologies
    Creating web apps using html hand written.

2.Dynamic Content Generation web app -  1996- till date
     Creating web apps dynamically by connecting datasources,response would be html
  Technologies: CGI,Java Servlets/jsp, Microsoft asp,Php etc.......

3. Web Services-1998 to till data
   Creating web apps dynamically by connecting data sources
   response would be "XML"(data)
   3.1.SOAP web services-  xml based
   3.2.RESTFull web services -  xml,json,different data types

4.SPA - Single Page web apps - client side -2007 to till date
....................................................................................
			What apps we are going to build
.....................................................................................

We are going to build both client and server side apps

1.SPA - React,Redux
2.Dynamic content Generation apps - Next.js

		React is js lib for building single page web apps.

.....................................................................................
			Design patterns and ui libs and frameworks
.....................................................................................

1.Angular uses "MVC" Design pattern
2.Vue.js uses "MVC" Design pattern
3.React uses "Flux" Design pattern

.....................................................................................
			Coding style
.....................................................................................
  
Any User interface development frameworks provides 
  1.Markup  - html code,css
  2.Data 

Angular isloates 
  markup(html,css) into separate  called "templates"
  data into services(holding data and biz logic)

React isloates
  markup into js code
  data into js code- hooks,state  management libs like redux...
 
	React embeds everything into javascript...
.....................................................................................
			 DOM -  Document Object Model
.....................................................................................

What is DOM?
   DOM is specification  released by W3c organgization,in order to build web apps for browsers.
https://www.w3.org/TR/1998/WD-DOM-19980416/	

In order to understand DOM fully , we need to understand HTML very deeply.


source code

hello.java
hello.c
hello.cpp
hello.py
hello.js
 ----->compiled ?
to generate assembly instructions

|
compiled code - assembly instruction
 hello.class
 hello.obj
|
Execute
 final output

HTML:

1.HTML IS PL? 
  - YES
2.HTML Is compiled 
  -YES
  HTML source code is compiled into assembly. 

3.HTML is executed?
  Yes
 
source code:
source code:

index.html

<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>

|
-------------------Browser
loader---LOAD Code into browser
 |
  from file: or http:
 |
Parser :
   Parser is special compiler which converts source into lexcial tree(string tree)

body
  div
     h1
        Welcome 
     h1
  div
body
|
 Complier-Compilation : Convert this into assembly
|
body -load xxx
  div
     h1
        Welcome 
     h1
  div
body
.............................................................................
.....................................................................................
         Static web pages: htmls are displayed into browser.
.....................................................................................
In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

			That is birth of javascript
.....................................................................................
..............................................................................................
Static web pages: htmls are displayed into browser.
..............................................................................................
In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

that is birth of javascript.

How to access nodes from javascript engine?
  
One spec was published ,As per that spec
 "Document Object Model"
    -How to represent document(elements/nodes) in object oriented way.->DOM

 "Documents can be reprsented as Objects" : Object oriented Document Programming.

.....................................................................................

............................................................................................

How dom works?

index.html           Browser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                 Every Html ELEMENT Inside Browser is "C Program"

	       Every Html ELEMENT Inside javascript engine is "Object"


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.	*************************************************************************************

Who and when "H1" object is created?

if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()


<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?

Note: For html elements, we cant create object directly, rather than JS Engine will create objects , return references to the developer to access.
 
How via factory Objects: object helps to get other documents

Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.


Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.
...................................................................................
What is our objective here? DOM Programming?

Enter into DOM programming:

1.write dom programming using javascript language.

<body>
  |
HTMLDocument : body : factory Object


Document apis:

Finding HTML Elements

HTMLElement document.getElementById(id)
      Find an element by element id
HTMLElement Document document.getElementsByTagName(name)
	Find elements by tag name
HTMLElement document.getElementsByClassName(name)
	Find elements by class name

HTMLElement document.querySelectory(selector) 
      find element/elements by selector


Changing HTML Elements : update existing element
......................
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements
document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element

/////////////////////////////////////////////////////////////////////////////////////

..................................................................................
		Birth of Java script libs and frameworks
....................................................................................
In 2001,DOM Wrappers - libs /frameworks came into picture.
 DOJO
2005, JQuery

After 2006 , community people started introducing so many js frameworks and libs..

Most Popular libs and frameworks

1.JQuery
2.Angular.js
3.Dojo
4.Extjs
5.Angular
6.React
7.Vue js
etc.....

Architecture tech stack for dom programming


Plain JS
			 Application(dom) -plain js
			     |
			 Javascript Engine
			      |
			  Browser Engine

Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine




Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		              -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		       Application(React)
			     |
		       ---------------------------
	             React Engine :React fiber-->React 16 on wards		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine
.....................................................................................

How react represents dom inside react engine?

Based on VDOM(Virtual DOM) specification...
	The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. This process is called reconciliation.

React is created by face book.

React was created not for others but created for face book one of the use case called "Buddylist" / chat application.

instagram web version was fully built by react.

React most implementations

1.flipkart ui is written react.
2.espn cric info
3.facebook use case chat , graph....
4.netflix
etc......

Where we can use React ? What type of application we can build using react.

Single Page web app...

Data intensive application // Data driven app
 where more data , which are chainging rapidly, where you want to update ui very faster with out ui flickering.

React can be used to build application for 

.........................................
1.browsers : Desktop
2.Mobile Apps : React Native

face book is working on many futures projects related to react

3.React VR : Virtual Reality.
4.React Car : For car applications
5.React TV (React Native)  : React for TV.
6.React IOT : any devices

We are going to learn react web for browsers.

React core modules:

react.js      => Core module
react-dom.js  => Browser

.....................................................................................				React and ui building
...................................................................................
  React uses  a small programming language to describe UI called "JSX"

.....................................................................................				React and ui building
...................................................................................
React uses  a small programming language to describe UI called "JSX"

As we discussed React is used in many app dev like browser,mobile,tv apps.

Each app type(browser,mobile) has its own JSX syntax...

Browser jsx uses HTML as language
Mobile Jsx uses "Mobile markup" as language.

-----------------------------------------------------------------------------
 Markup layer             |  React Core Engine    | Render Engine   | Target
-----------------------------------------------------------------------------

HTML Markup---------------|  Object Tree(V.DOM)   | ReactDom.render |  Browser

Mobile Markup-------------|  Object Tree          |ReactNative.render| Mobile 						   /Tabs/TV

..............
VR Markup---------------  |  Object Tree          |VR.render         |VR devices

IOT Markup--------------- |  Object Tree          | IOT.render       |IOT Devices   
....................................................................................


....................................................................................
Object Tree :

Note : in js every html element is object, in browser every element is node which forms tree.
<div>
   <h1>
       hello
   </h1>
       |
       div
          |
          h1
            hello

         |
         divObject
		|
		H1 Object
			hello


		|
		React engine
		   |
.....................................................................................
.....................................................................................
			 React Project Setup
.....................................................................................
We are going to build single page web app.

React teams offers tool set to create react project.

create-react-app
 now this tool has been depreciated.

now a days we are using vite based tool to create react projects.

npm create vite@latest
G:\Marsh\ui-react>npm create vite@latest

> npx
> create-vite

√ Project name: ... myreact-app
√ Select a framework: » React
√ Select a variant: » JavaScript

Scaffolding project in G:\Marsh\ui-react\myreact-app...

Done. Now run:

  cd myreact-app
  npm install
  npm run dev

.....................................................................................Project structure:
package.json
{
  "name": "hello-react",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.2",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.7",
    "vite": "^5.3.1"
  }
}

entry file:
main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
...................................................................................
//dom using plain js

function createDOM() {
    //create H1 object 
    const Heading = document.createElement('h1')
    //set properties on h1
    Heading.innerHTML = 'Hello'
    Heading.style.color = 'red'
    //get container element on which you attach this h1
    const rootElemement = document.getElementById('root')
    //attach Heading with rootEleemtn
    rootElemement.appendChild(Heading)

}
createDOM()
.....................................................................................
			DOM using React
....................................................................................

import { createRoot } from 'react-dom/client'

//create dom element
// const Heading = document.createElement('h1') //plain js
const Heading = <h1>Hello React</h1>  // react jsx code

const rootElemement = document.getElementById('root')
createRoot(rootElemement).render(Heading)
or 
createRoot(document.getElementById('root')).render(Heading)
....................................................................................
.....................................................................................
	JSX - java script and XML - langugage to create User interfaces
.....................................................................................

React uses declarative dom programing using a mini language invented by facebook : JSX

JSX : - javascript xml

 1.PL language built by face book to write user interfaces.
 2.JSX is collection of html markup and javascript.
 3.JSX is dsl and declarative.
 4.Every device has its own jsx language syntax.
 5.Browsers jsx can't be used for building mobile application.

Since jsx  is a language cant be executed on browser /mobile directly.
.....................................................................................
JSX compilation model:

                   layout.js / layout.jsx
		       |
		    compiler - babel.js 
			|
		    plain js code
			|-----------------------Dev cycle
	----------------------------------------- -- Excution cycles Starts
  Runtime : React Engine  compiled code feed into react engine
			|
		     Excute compiled js code : function calls
			|
	     create virtual Object tree (in browser V-dom)
		        |
		     Render Engine ; will convert react object tree into js dom object tree
			|
		   Flush the tree into target
			|
	--------------------------------------------
        |      |
     Browser  Mobile

JSX is used to create dom elements.
...................................................................................
				   Component
...................................................................................

What is Component ?
  Component is Object , Coined by MS in 1989.

What is Component ?
  Component is Object , Coined by MS in 1989.

According to ms, Component is object which has state(data),behaviour(methods) + User interface(Visual).
 eg:Button,TextBox,Grid,Menu,MenuBar,Layout,Table.....


"React apps are made out of components. A Component is piece of the UI that has its own logic and appearance,

Threre two libs 
1.react.js  => to create component and manages all features related component.
2.react-dom => Render engine
react.js

1.React
  It top level class which provides all apis to create,delete,update components.


react-dom.js

2.ReactDOM
   It is top level class which provides api to flush the v.dom into real dom.onent can be small as a button or as large as an entire Page"
			..................................................................................
			Component Creational patterns
...................................................................................


1.variable pattern
2.functional pattern
3.es 6 class pattern

Components can be created any one or mixed way  style.
		
          "functional Pattern" is more popular and recommended pattern....



import { createRoot } from 'react-dom/client'


//Heading is just variable
// <h1>Hello React</h1> is component
const Heading = <h1>Hello React</h1>  // react jsx code
createRoot(document.getElementById('root')).render(Heading)
.....................................................................................


import { createRoot } from 'react-dom/client'


//functional component
// function Heading() {
//     return <h1>
//         Hello React
//    </h1>

// }
// const Heading = () => {
//     return <h1>
//         Hello React
//     </h1>
// }
const Heading = () => <h1>
    Hello React
</h1>


//createRoot(document.getElementById('root')).render(Heading())
createRoot(document.getElementById('root')).render(<Heading></Heading>)

createRoot(document.getElementById('root')).render(Hello())

Here you are calling function "Hello()", which in returns dom element.

This way of calling function is called "Imperative way".

We need to call function using "Declarative way" - Readable way.

React recommends to call function using html(xml) syntax. <Hello></Hello>

....................................................................................
			 class components
...................................................................................

Using ES6 Classes we can create components, now a days class components been deprecated.

import React from 'react'
import { createRoot } from 'react-dom/client'

class Heading extends React.Component {

    render() {
        return <h1>Hello React!!</h1>
    }

}

createRoot(document.getElementById('root')).render(<Heading></Heading>)
.....................................................................................
.....................................................................................
			Exploring JSX
.....................................................................................

JS-Javascript
X -  XML

Since HTML parser is weak, but when y write react code, we need consistent code generation.

So that react team, developed compiler follows basic xml rules.


Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing. 

eg:

import React from 'react'
import { createRoot } from 'react-dom/client'

const Heading = ()=>{

    return <h1>Hello 
}

createRoot(document.getElementById('root')).render(<Heading></Heading>)

self closing:

import React from 'react'
import { createRoot } from 'react-dom/client'

const Heading = ()=>{
    return <h1>Hello </h1>
}

createRoot(document.getElementById('root')).render(<Heading/>)
....................................................................................

2. In xml you must have one single root element.
  all elements must be organized under single root element.

 <h1>Welcome to React</h1>
 <p>Path finder</p>

In html what can be root element
 <div>,<span>,all html 5 layout elements header,footer,section,aside...

import React from 'react'
import { createRoot } from 'react-dom/client'

const Heading = () => {
    return <div><h1>Marsh McLennan</h1>
        <p>Marsh McLennan is the world’s leading professional services firm in risk, strategy and people</p>
    </div>
}

createRoot(document.getElementById('root')).render(<Heading />)


In the above code, i have to use "div" element manually, if not ,it will throw error, some times i dont want root element

.....................................................................................
			  Fragments
....................................................................................

Fragements are used to wrap elements invisible way.

Suppose if i dont want any root element, then we can use Fragement.

Fragements are used to escape from compiler.
		


Syntax:

 <React.Fragment></React.Fragement>

 <Fragment></Fragement>

 <></>

const Heading = () => {
    return <>
        <h1>Marsh McLennan</h1>
        <p>Marsh McLennan is the world’s leading professional services firm in risk, strategy and people</p>
    </>
}
createRoot(document.getElementById('root')).render(<Heading />)

....................................................................................

Rule 3:
    Every Component name must start with Uppercase, should be Noun.



import React from 'react'
import { createRoot } from 'react-dom/client'

const heading = () => {
    return <>
        <h1>Marsh McLennan</h1>
        <p>Marsh McLennan is the world’s leading professional services firm in risk, strategy and people</p>
    </>
}
createRoot(document.getElementById('root')).render(<heading />)

Warning: The tag <heading> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    at heading
.....................................................................................				UI Structure and React Components
			    Component Composition
.....................................................................................

Components are created indivually, organized as tree.



import React from 'react'
import { createRoot } from 'react-dom/client'

const Heading = () => {

    return <header>
        <h1> Marsh McLennan</h1>
    </header>
}
const Body = () => {

    return <section>
        <p>
            Marsh McLennan is the world’s leading professional services firm in risk, strategy and people.
        </p>
        <p>
            We bring together experts from across our four global businesses — Marsh, Guy Carpenter, Mercer and Oliver Wyman — to help make organizations more successful and societies more resilient
        </p>
    </section >
}
const Footer = () => {
    return <footer>
        <h3>Marsh McLennan is the leader in risk, strategy and people, helping clients navigate a dynamic environment through four global businesses</h3>
    </footer>
}

const Page = () => {
    return <>
        <Heading />
        <Body />
        <Footer />
    </>
}
const App = () => {
    return <Page />
}


createRoot(document.getElementById('root')).render(<App/>)

....................................................................................
			Structuring React apps
		  Component Composition and Modularity
.....................................................................................

Every Component will go into separate folders and files, through es 6 modules you can import export components..


Every Component will go into separate folders and files, through es 6 modules you can import export components..

https://legacy.reactjs.org/docs/faq-structure.html

Is there a recommended way to structure React projects?

React doesn’t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.

Grouping by features or routes

common/
  Avatar.js
  Avatar.css
  APIUtils.js
  APIUtils.test.js
feed/
  index.js
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  FeedAPI.js
profile/
  index.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css
  ProfileAPI.js

Grouping by file type
api/
  APIUtils.js
  APIUtils.test.js
  ProfileAPI.js
  UserAPI.js
components/
  Avatar.js
  Avatar.css
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css




const Page = () => {
    return <div>
        <Heading />
        <Body />
        <Footer />
    </div>
}
const App = () => {
    return <Page />
}


createRoot(document.getElementById('root')).render(<App/>)
.....................................................................................
				
src/header/Header.jsx

export const Heading = () => {
    return <header>
        <h1> Marsh McLennan</h1>
    </header>
}

src/footer/Footer.jsx

export const Footer = () => {
    return <footer>
        <h3>Marsh McLennan is the leader in risk, strategy and people, helping clients navigate a dynamic environment through four global businesses</h3>
    </footer>
}

src/body/Body.jsx
export const Body = () => {

    return <section>
        <p>
            Marsh McLennan is the world’s leading professional services firm in risk, strategy and people.
        </p>
        <p>
            We bring together experts from across our four global businesses — Marsh, Guy Carpenter, Mercer and Oliver Wyman — to help make organizations more successful and societies more resilient
        </p>
    </section >
}
src/page.jsx
import { Heading } from './heading/Heading'
import { Body } from './body/Body'
import { Footer } from './footer/Footer'

export const Page = () => {
    return <>
        <Heading />
        <Body />
        <Footer />
    </>
}

src/main.jsx

import React from 'react'
import { createRoot } from 'react-dom/client'
import { Page } from './page'

const App = () => {
    return <Page />
}

createRoot(document.getElementById('root')).render(<App />)

.....................................................................................
			 React Dev tool
.....................................................................................

It is tool part of browser as plugin, used to insepect the structure of app.
https://react.dev/learn/react-developer-tools

.....................................................................................
			How to add css in react
.....................................................................................


1.Your own css
2.thrid party css frameworks - bootstrap

class
style - This will see later

if yo want to use bootstrap

npm i bootstrap

src/main.jsx

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
// import './index.css'
import 'bootstrap/dist/css/bootstrap.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

.....................................................................................
			 Data && React
....................................................................................

Data Binding:

Data can be attached in react using {}

How to represent data?
->primitives - string,numbers,boolean
->objects - object,arrays

How to bind data?
  {variable} {expression}
 
  {a} {fun()} {10*2} {isHidden ? 'Show':'Hide'} 

..................................................................................
			   Data Binding Patterns

1.property binding aka props pattern
2.State binding aka state pattern.

props Pattern:

npm create vite@latest

props-pattern
.....................................................................................

	When you think about component , you should thing about resuablity..

Basic Data binding:
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

//Profile Component : Profile information.

const Profile = () => {
    //profile data
    const id = 1
    const name = "Subramanian"
    const gender = "Male"
    const status = true
    return <div>
        <h1>Profile Information</h1>
        <p>Id : {id}</p>
        <p>Name:  {name}</p>
        <p>Gender:  {gender}</p>
        <p>Status : {status ? "Available" :"Not Available"}</p>
    </div>
}
//Gallery Component : Displays many profiles

const Gallery = () => {
    return <>
        <Profile />
    </>
}

const App = () => {
    return <>
        <Gallery />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

In the above code, the profile components shows only "Subramnaian" data , what if i want to show different profile informations.

			Apply Resuablity Pattern

Solution Property Pattern:

 Passing data to the component as parameter, so that the component will display different data.

How to pass data to the component from parent component?

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

//Profile Component : Profile information.

const Profile = (id, name, gender, status) => {
    return <div>
        <h1>Profile Information</h1>
        <p>Id : {id}</p>
        <p>Name:  {name}</p>
        <p>Gender:  {gender}</p>
        <p>Status : {status ? "Available" : "Not Available"}</p>
    </div>
}
//Gallery Component : Displays many profiles

const Gallery = () => {
    //profile data
    const id = 1
    const name = "Subramanian"
    const gender = "Male"
    const status = true
    return <>
        {/* <Profile /> */}
        {Profile(id, name, gender, status)}
        {Profile(2, 'Murugan', "Male", false)}
    </>
}

const App = () => {
    return <>
        <Gallery />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

What if i use declarative syntax - <Profile >


import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

//Profile Component : Profile information.
//props is just variable Name, it can be any name
//props value is just object, which collects all data sent from the parent component
const Profile = (props) => {
    console.log(props)
    return <div>
        <p>Id : {props.id}</p>
        <p>Name:  {props.name}</p>
        <p>Gender:  {props.gender}</p>
        <p>Status : {props.status ? "Available" : "Not Available"}</p>
    </div>
}
//Gallery Component : Displays many profiles

const Gallery = () => {
    //profile data
    const id = 1
    const name = "Subramanian"
    const gender = "Male"
    const status = true
    return <>
            <h1>Profile Information</h1>

        {/* {Profile(id, name, gender, status)}
        {Profile(2, 'Murugan', "Male", false)} */}
        <Profile id={id} name={name} gender={gender} status={status} />
        <Profile id={2} name="Murugan" gender="Male" status={true} />
        <Profile id={3} name="Karthik" gender="Male" status={true} />
        <Profile id={4} name="Arun" gender="Male" status={true} />
        <Profile id={5} name="John" gender="Male" status={true} />
        <Profile id={5} name="Ahmed" gender="Male" status={true} />

    </>
}

const App = () => {
    return <>
        <Gallery />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
.....................................................................................
			  Default Props
.....................................................................................

if property not passed you can supply default props.

How to supply default props?

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

//old way
// const Profile = (props) => {
//     return <div>
//         <p>Id : {props.id}</p>
//         <p>Name:  {props.name}</p>
//         <p>Gender:  {props.gender}</p>
//         <p>Status : {props.status ? "Available" : "Not Available"}</p>
//     </div>
// }
// //default Profile Props
// Profile.defaultProps = {
//     id: 0,
//     name: 'name',
//     gender: 'Male',
//     status: false
// }

//new way
const Profile = ({ id = 0, name = "name", gender = "Male", status = true }) => {
    return <div>
        <p>Id : {id}</p>
        <p>Name:  {name}</p>
        <p>Gender:  {gender}</p>
        <p>Status : {status ? "Available" : "Not Available"}</p>
    </div>
}


const Gallery = () => {
    const id = 1
    const name = "Subramanian"
    const gender = "Male"
    const status = true
    return <>
        <h1>Profile Information</h1>

        <Profile id={id} name={name} gender={gender} status={status} />
        <Profile id={2} name="Murugan" gender="Male" status={true} />
        <Profile id={3} name="Karthik" gender="Male" status={true} />
        <Profile id={4} name="Arun" gender="Male" status={true} />
        <Profile id={5} name="John" gender="Male" status={true} />
        <Profile id={5} name="Ahmed" gender="Male" status={true} />
        <Profile name="Marsh" />
    </>
}

const App = () => {
    return <>
        <Gallery />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
.....................................................................................
			ES 6 Feature - Object destructuring
....................................................................................


// function display(profile) {
//     //display values
//     console.log(`Id ${profile.id}`)
//     console.log(`Name ${profile.name}`)
//     console.log(`Id ${profile.address.city}`)
// }

//using object destructuring , we can simplify object property display
// function display(profile) {
//     //syntax
//     const { id, name, address } = profile
//     console.log(`Id ${id}`)
//     console.log(`Name ${name}`)
//     console.log(`Id ${address.city}`)
// }

// function display(profile) {
//     //syntax
//     const { id, name, address: { city } } = profile
//     console.log(`Id ${id}`)
//     console.log(`Name ${name}`)
//     console.log(`Id ${city}`)
// }


// function display({ id, name, address: { city } }) {
//     console.log(`Id ${id}`)
//     console.log(`Name ${name}`)
//     console.log(`Id ${city}`)
// }
const display = ({ id, name, address: { city } }) => {
    console.log(`Id ${id}`)
    console.log(`Name ${name}`)
    console.log(`Id ${city}`)
}

display({ id: 1, name: 'Subramanian', address: { city: 'Coimbatore' } })


//return objects and destructuring

// function getStockValues() {
//     return {
//         id: 1,
//         name: 'google',
//         value: 1000,
//         qty: 100000
//     }
// }

// function getStockValues(id = 1, name = 'google', value = 0, qty = 0) {
//     return {
//         id: id,
//         name: name,
//         value: value,
//         qty: qty
//     }
// }
// function getStockValues(id = 1, name = 'google', value = 0, qty = 0) {

//     //key:variable if it is same, remove one variable and :
//     return {
//         id,
//         name,
//         value,
//         qty
//     }
// }
// const getStockValues = (id = 1, name = 'google', value = 0, qty = 0) => {
//     return {
//         id,
//         name,
//         value,
//         qty
//     }
// }
const getStockValues = (id = 1, name = 'google', value = 0, qty = 0) => ({
    id,
    name,
    value,
    qty
})
console.log(getStockValues(1, "google", 2000, 1222))
console.log(getStockValues())

.....................................................................................
			 How to apply property destructuring
.....................................................................................
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

// const Profile = (props) => {
//     return <div>
//         <p>Id : {props.id}</p>
//         <p>Name:  {props.name}</p>
//         <p>Gender:  {props.gender}</p>
//         <p>Status : {props.status ? "Available" : "Not Available"}</p>
//     </div>
// }
// const Profile = (props) => {
//     const { id, name, gender, status } = props
//     return <div>
//         <p>Id : {id}</p>
//         <p>Name:  {name}</p>
//         <p>Gender:  {gender}</p>
//         <p>Status : {status ? "Available" : "Not Available"}</p>
//     </div>
// }
const Profile = ({ id, name, gender, status }) => <div>
    <p>Id : {id}</p>
    <p>Name:  {name}</p>
    <p>Gender:  {gender}</p>
    <p>Status : {status ? "Available" : "Not Available"}</p>
</div>

const Gallery = () => {
    const id = 1
    const name = "Subramanian"
    const gender = "Male"
    const status = true
    return <>
        <h1>Profile Information</h1>

        {/* {Profile(id, name, gender, status)}
        {Profile(2, 'Murugan', "Male", false)} */}
        <Profile id={id} name={name} gender={gender} status={status} />
        <Profile id={2} name="Murugan" gender="Male" status={true} />
        <Profile id={3} name="Karthik" gender="Male" status={true} />
        <Profile id={4} name="Arun" gender="Male" status={true} />
        <Profile id={5} name="John" gender="Male" status={true} />
        <Profile id={5} name="Ahmed" gender="Male" status={true} />

    </>
}

const App = () => {
    return <>
        <Gallery />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
......................................................................................			 Property Rethrow
....................................................................................
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

// const Profile = props => <div>
//     {/* Here we pass every prop manually, this is complex */}
//     <ProfileDashboard id={props.id} name={props.name} status={props.status} />
// </div>

//Property Rethrow is a concept through which we can simplify property passing
const Profile = props => <div>
    {/* passing entire props via es6 spread noation */}
    <ProfileDashboard {...props} title="Your Profile" />
</div>

const ProfileDashboard = ({ id = 1, title = "", name = 'Subramaian', gender = 'Male', status = true }) => {
    return <>
        <h3>{title}</h3>
        <p>Id : {id}</p>
        <p>Name:  {name}</p>
        <p>Gender:  {gender}</p>
        <p>Status : {status ? "Available" : "Not Available"}</p>
    </>
}

const Gallery = () => {
    const id = 1
    const name = "Subramanian"
    const gender = "Male"
    const status = true
    return <>
        <h1>Profile Information</h1>
        <Profile id={id} name={name} gender={gender} status={status} />
        <Profile id={2} name="Murugan" gender="Male" status={true} />
        <Profile id={3} name="Karthik" gender="Male" status={true} />
        <Profile id={4} name="Arun" gender="Male" status={true} />
        <Profile id={5} name="John" gender="Male" status={true} />
        <Profile id={5} name="Ahmed" gender="Male" status={true} />
        <Profile />
    </>
}

const App = () => {
    return <>
        <Gallery />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

.....................................................................................				Inline Styling
....................................................................................

<div class="cssClass">

<div style={}>

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const Header = () => {

    return <div>
        <h1 style={styles.heading}>Header</h1>
        <h2 style={{ color: 'blue', fontFamily: "sans-serif" }}>Your Company Goes Here</h2>
    </div>
}
const styles = {
    heading: {
        color: 'red'
    }
}


const App = () => {
    return <Header>

    </Header>
}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)

.....................................................................................
				What can be prop
.....................................................................................

1.Prop can be data
2.Prop can another component or element
..
3.Prop can be function
4.Prop can be state(dynamic prop)



		
			Prop can another component or element
			.....................................

How to render component

 <Grid>
   //here you can pass something
 </Grid> -  Grid can have children: passing prop
 
 <Grid/> -  Grid has no children
 
Parent-Child Relation ship:
............................

Way 1:

cont A = ()=>{
  return <B/>
}
cont B = ()=>{
  return <h1>test</h1>
}

Here A is parent and B is child

Way 2: pass child component as prop

Parent-Child Relation ship:
 via props

<Layout> -parent
	<Page>-child
		<Header> -child
		   <Logo> -child

		   </Image>
		</Header>
	</Page>
</Layout>

eg:

Parent-Child without props;

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

const Title = props => {
    return <h2>Title goes</h2>
}

const Header = () => {
    return <div>
        <Title />
    </div>
}


const App = () => {
    return <>
        <Header />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

Here , what is draback of Header, Header is having Title, but is tightly coupled,
what if i want to replace title with Different Component in future, you have to change the Header Component.

What if Header component is from third party, then how to change it?
  It is not possible.

If component wants to display child components dynamically, loosly coupled way, then we have to pass component as prop.

eg:
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

const Title = props => {
    return <h2>Title goes</h2>
}

const Header = ({ children }) => {
    return <div>
        {/* <Title /> */}
        {/* {props.children} */}
        {children}
    </div>
}
const Carousel = props => {
    return <div>
        <h1>Carousel</h1>
    </div>
}


const App = () => {
    return <>
        {/* <Header /> */}
        <Header>
            {/* Component as prop */}
            {/* <Title /> */}
            <Carousel />
        </Header>
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
....................................................................................
			  Rendering List
.....................................................................................

Simple List:
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

//
const List = ({ numberList }) => {
    return <>
        <ul>
            {
                //loop iterate array.
                // numberList.map(item => {
                //     return <li>{item}</li>
                // })
                numberList.map(item => <li>{item}</li>)
            }
        </ul>
    </>
}

const App = () => {
    const numberList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    return <>
        <List numberList={numberList} />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

Object List:
............
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { PRODUCTS } from './mock-data/products'


const ProductsList = ({ products }) => {
    return <div>
        {
            products.map(({ id, image, title, description, category, rating: { rate, count } }) => {
                return <div key={id}>
                    <h2>{title}</h2>
                    <img src={image} height={200} width={200} />
                    <span>{category}</span>
                    <section>
                        <p>{description}</p>
                        <h4> Price : {rate}$   Available Stock: {count}</h4>
                    </section>
                </div>
            })
        }
    </div>
}

//todo: Create Product component which should display production information:
//you have to pass all product details from the Productlist component as prop

const App = () => {
    return <>
        <ProductsList products={PRODUCTS} />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)














