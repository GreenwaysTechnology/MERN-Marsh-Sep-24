

				React,Redux,Next.js
.....................................................................................

What is react?
 A JavaScript library for building user interfaces.

What is User interface and  what are the user interface technologies?

Where User is going to interact.

Types of user interfaces

1.Mobile App
2.Desk top applications
3.Web apps using browsers
4.Device apps

Web apps:
........

1.Client side web
  Client apps are executed in the client side , browser apps.

1.1. Single page web apps

2.Server side web

  Server apps are executed at server, client will get only response.

1.Static content web app -1989-1995 - still we use this technologies
    Creating web apps using html hand written.

2.Dynamic Content Generation web app -  1996- till date
     Creating web apps dynamically by connecting datasources,response would be html
  Technologies: CGI,Java Servlets/jsp, Microsoft asp,Php etc.......

3. Web Services-1998 to till data
   Creating web apps dynamically by connecting data sources
   response would be "XML"(data)
   3.1.SOAP web services-  xml based
   3.2.RESTFull web services -  xml,json,different data types

4.SPA - Single Page web apps - client side -2007 to till date
....................................................................................
			What apps we are going to build
.....................................................................................

We are going to build both client and server side apps

1.SPA - React,Redux
2.Dynamic content Generation apps - Next.js

		React is js lib for building single page web apps.

.....................................................................................
			Design patterns and ui libs and frameworks
.....................................................................................

1.Angular uses "MVC" Design pattern
2.Vue.js uses "MVC" Design pattern
3.React uses "Flux" Design pattern

.....................................................................................
			Coding style
.....................................................................................
  
Any User interface development frameworks provides 
  1.Markup  - html code,css
  2.Data 

Angular isloates 
  markup(html,css) into separate  called "templates"
  data into services(holding data and biz logic)

React isloates
  markup into js code
  data into js code- hooks,state  management libs like redux...
 
	React embeds everything into javascript...
.....................................................................................
			 DOM -  Document Object Model
.....................................................................................

What is DOM?
   DOM is specification  released by W3c organgization,in order to build web apps for browsers.
https://www.w3.org/TR/1998/WD-DOM-19980416/	

In order to understand DOM fully , we need to understand HTML very deeply.


source code

hello.java
hello.c
hello.cpp
hello.py
hello.js
 ----->compiled ?
to generate assembly instructions

|
compiled code - assembly instruction
 hello.class
 hello.obj
|
Execute
 final output

HTML:

1.HTML IS PL? 
  - YES
2.HTML Is compiled 
  -YES
  HTML source code is compiled into assembly. 

3.HTML is executed?
  Yes
 
source code:
source code:

index.html

<html>
<head></head>
<title><title>
<body>
  <div>
     <h1>Welcome</h1>
  </div>
</body>
</html>

|
-------------------Browser
loader---LOAD Code into browser
 |
  from file: or http:
 |
Parser :
   Parser is special compiler which converts source into lexcial tree(string tree)

body
  div
     h1
        Welcome 
     h1
  div
body
|
 Complier-Compilation : Convert this into assembly
|
body -load xxx
  div
     h1
        Welcome 
     h1
  div
body
.............................................................................
.....................................................................................
         Static web pages: htmls are displayed into browser.
.....................................................................................
In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

			That is birth of javascript
.....................................................................................
..............................................................................................
Static web pages: htmls are displayed into browser.
..............................................................................................
In 1996,Netscap communication,Started an RND project called "How to manipulate the tree"

Tree is written in c language,then we need another c program to communicate.

But NETSCAP decided not to use C pl.

Netscap wanted to put java like implementation inside browser to manipulate "Tree".

that is birth of javascript.

How to access nodes from javascript engine?
  
One spec was published ,As per that spec
 "Document Object Model"
    -How to represent document(elements/nodes) in object oriented way.->DOM

 "Documents can be reprsented as Objects" : Object oriented Document Programming.

.....................................................................................

............................................................................................

How dom works?

index.html           Browser runtime(C program)         Javascript Engine
<h1>Hello</h1>       h1-Node                           h1- Object
			Hello-Node			 Hello Object Property



                 Every Html ELEMENT Inside Browser is "C Program"

	       Every Html ELEMENT Inside javascript engine is "Object"


javascript developer ---->uses api --->to communicate Object---->js engine---->browser engine.	*************************************************************************************

Who and when "H1" object is created?

if you want to create object?

 class/ function

function Employee(){}  let emp = new Employee()


<h1> => function HTMLHeadingElement(){} => let h =new HTMLHeadingElement() ?

Note: For html elements, we cant create object directly, rather than JS Engine will create objects , return references to the developer to access.
 
How via factory Objects: object helps to get other documents

Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.


Factory Object : HTML Document =>body

document.getElementById();
   |
Implicit object reference variable which points HTMLDocument OBject.
...................................................................................
What is our objective here? DOM Programming?

Enter into DOM programming:

1.write dom programming using javascript language.

<body>
  |
HTMLDocument : body : factory Object


Document apis:

Finding HTML Elements

HTMLElement document.getElementById(id)
      Find an element by element id
HTMLElement Document document.getElementsByTagName(name)
	Find elements by tag name
HTMLElement document.getElementsByClassName(name)
	Find elements by class name

HTMLElement document.querySelectory(selector) 
      find element/elements by selector


Changing HTML Elements : update existing element
......................
element.innerHTML =  new html content	Change the inner HTML of an element
element.attribute = new value	Change the attribute value of an HTML element
element.style.property = new style	Change the style of an HTML element
Method	Description
element.setAttribute(attribute, value)	Change the attribute value of an HTML element

Adding and Deleting Elements
document.createElement(element)	Create an HTML element
document.removeChild(element)	Remove an HTML element
document.appendChild(element)	Add an HTML element
document.replaceChild(new, old)	Replace an HTML element

/////////////////////////////////////////////////////////////////////////////////////

..................................................................................
		Birth of Java script libs and frameworks
....................................................................................
In 2001,DOM Wrappers - libs /frameworks came into picture.
 DOJO
2005, JQuery

After 2006 , community people started introducing so many js frameworks and libs..

Most Popular libs and frameworks

1.JQuery
2.Angular.js
3.Dojo
4.Extjs
5.Angular
6.React
7.Vue js
etc.....

Architecture tech stack for dom programming


Plain JS
			 Application(dom) -plain js
			     |
			 Javascript Engine
			      |
			  Browser Engine

Framework/lib
			 Application(JQuery)
			     |
		       ---------------------------
			  JQuery Engine	------javascript programming		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine




Angular
			 Application(Angular)
			     |
		       ---------------------------
			  Angular Engine : Renderer(Ng2) Renderer2(Ng4,5),Ivy(6,7)		              -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine

React


		       Application(React)
			     |
		       ---------------------------
	             React Engine :React fiber-->React 16 on wards		
                       -------------------------------
			      |
			 Javascript Engine
			      |
			  Browser Engine
.....................................................................................

How react represents dom inside react engine?

Based on VDOM(Virtual DOM) specification...
	The virtual DOM (VDOM) is a programming concept where an ideal, or “virtual”, representation of a UI is kept in memory and synced with the “real” DOM by a library such as ReactDOM. This process is called reconciliation.

React is created by face book.

React was created not for others but created for face book one of the use case called "Buddylist" / chat application.

instagram web version was fully built by react.

React most implementations

1.flipkart ui is written react.
2.espn cric info
3.facebook use case chat , graph....
4.netflix
etc......

Where we can use React ? What type of application we can build using react.

Single Page web app...

Data intensive application // Data driven app
 where more data , which are chainging rapidly, where you want to update ui very faster with out ui flickering.

React can be used to build application for 

.........................................
1.browsers : Desktop
2.Mobile Apps : React Native

face book is working on many futures projects related to react

3.React VR : Virtual Reality.
4.React Car : For car applications
5.React TV (React Native)  : React for TV.
6.React IOT : any devices

We are going to learn react web for browsers.

React core modules:

react.js      => Core module
react-dom.js  => Browser

.....................................................................................				React and ui building
...................................................................................
  React uses  a small programming language to describe UI called "JSX"

.....................................................................................				React and ui building
...................................................................................
React uses  a small programming language to describe UI called "JSX"

As we discussed React is used in many app dev like browser,mobile,tv apps.

Each app type(browser,mobile) has its own JSX syntax...

Browser jsx uses HTML as language
Mobile Jsx uses "Mobile markup" as language.

-----------------------------------------------------------------------------
 Markup layer             |  React Core Engine    | Render Engine   | Target
-----------------------------------------------------------------------------

HTML Markup---------------|  Object Tree(V.DOM)   | ReactDom.render |  Browser

Mobile Markup-------------|  Object Tree          |ReactNative.render| Mobile 						   /Tabs/TV

..............
VR Markup---------------  |  Object Tree          |VR.render         |VR devices

IOT Markup--------------- |  Object Tree          | IOT.render       |IOT Devices   
....................................................................................


....................................................................................
Object Tree :

Note : in js every html element is object, in browser every element is node which forms tree.
<div>
   <h1>
       hello
   </h1>
       |
       div
          |
          h1
            hello

         |
         divObject
		|
		H1 Object
			hello


		|
		React engine
		   |
.....................................................................................
.....................................................................................
			 React Project Setup
.....................................................................................
We are going to build single page web app.

React teams offers tool set to create react project.

create-react-app
 now this tool has been depreciated.

now a days we are using vite based tool to create react projects.

npm create vite@latest
G:\Marsh\ui-react>npm create vite@latest

> npx
> create-vite

√ Project name: ... myreact-app
√ Select a framework: » React
√ Select a variant: » JavaScript

Scaffolding project in G:\Marsh\ui-react\myreact-app...

Done. Now run:

  cd myreact-app
  npm install
  npm run dev

.....................................................................................Project structure:
package.json
{
  "name": "hello-react",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "eslint": "^8.57.0",
    "eslint-plugin-react": "^7.34.2",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.7",
    "vite": "^5.3.1"
  }
}

entry file:
main.jsx
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
...................................................................................
//dom using plain js

function createDOM() {
    //create H1 object 
    const Heading = document.createElement('h1')
    //set properties on h1
    Heading.innerHTML = 'Hello'
    Heading.style.color = 'red'
    //get container element on which you attach this h1
    const rootElemement = document.getElementById('root')
    //attach Heading with rootEleemtn
    rootElemement.appendChild(Heading)

}
createDOM()
.....................................................................................
			DOM using React
....................................................................................

import { createRoot } from 'react-dom/client'

//create dom element
// const Heading = document.createElement('h1') //plain js
const Heading = <h1>Hello React</h1>  // react jsx code

const rootElemement = document.getElementById('root')
createRoot(rootElemement).render(Heading)
or 
createRoot(document.getElementById('root')).render(Heading)
....................................................................................
.....................................................................................
	JSX - java script and XML - langugage to create User interfaces
.....................................................................................

React uses declarative dom programing using a mini language invented by facebook : JSX

JSX : - javascript xml

 1.PL language built by face book to write user interfaces.
 2.JSX is collection of html markup and javascript.
 3.JSX is dsl and declarative.
 4.Every device has its own jsx language syntax.
 5.Browsers jsx can't be used for building mobile application.

Since jsx  is a language cant be executed on browser /mobile directly.
.....................................................................................
JSX compilation model:

                   layout.js / layout.jsx
		       |
		    compiler - babel.js 
			|
		    plain js code
			|-----------------------Dev cycle
	----------------------------------------- -- Excution cycles Starts
  Runtime : React Engine  compiled code feed into react engine
			|
		     Excute compiled js code : function calls
			|
	     create virtual Object tree (in browser V-dom)
		        |
		     Render Engine ; will convert react object tree into js dom object tree
			|
		   Flush the tree into target
			|
	--------------------------------------------
        |      |
     Browser  Mobile

JSX is used to create dom elements.
...................................................................................
				   Component
...................................................................................

What is Component ?
  Component is Object , Coined by MS in 1989.

What is Component ?
  Component is Object , Coined by MS in 1989.

According to ms, Component is object which has state(data),behaviour(methods) + User interface(Visual).
 eg:Button,TextBox,Grid,Menu,MenuBar,Layout,Table.....


"React apps are made out of components. A Component is piece of the UI that has its own logic and appearance,

Threre two libs 
1.react.js  => to create component and manages all features related component.
2.react-dom => Render engine
react.js

1.React
  It top level class which provides all apis to create,delete,update components.


react-dom.js

2.ReactDOM
   It is top level class which provides api to flush the v.dom into real dom.onent can be small as a button or as large as an entire Page"
			..................................................................................
			Component Creational patterns
...................................................................................


1.variable pattern
2.functional pattern
3.es 6 class pattern

Components can be created any one or mixed way  style.
		
          "functional Pattern" is more popular and recommended pattern....



import { createRoot } from 'react-dom/client'


//Heading is just variable
// <h1>Hello React</h1> is component
const Heading = <h1>Hello React</h1>  // react jsx code
createRoot(document.getElementById('root')).render(Heading)
.....................................................................................


import { createRoot } from 'react-dom/client'


//functional component
// function Heading() {
//     return <h1>
//         Hello React
//    </h1>

// }
// const Heading = () => {
//     return <h1>
//         Hello React
//     </h1>
// }
const Heading = () => <h1>
    Hello React
</h1>


//createRoot(document.getElementById('root')).render(Heading())
createRoot(document.getElementById('root')).render(<Heading></Heading>)

createRoot(document.getElementById('root')).render(Hello())

Here you are calling function "Hello()", which in returns dom element.

This way of calling function is called "Imperative way".

We need to call function using "Declarative way" - Readable way.

React recommends to call function using html(xml) syntax. <Hello></Hello>

....................................................................................
			 class components
...................................................................................

Using ES6 Classes we can create components, now a days class components been deprecated.

import React from 'react'
import { createRoot } from 'react-dom/client'

class Heading extends React.Component {

    render() {
        return <h1>Hello React!!</h1>
    }

}

createRoot(document.getElementById('root')).render(<Heading></Heading>)
.....................................................................................
.....................................................................................
			Exploring JSX
.....................................................................................

JS-Javascript
X -  XML

Since HTML parser is weak, but when y write react code, we need consistent code generation.

So that react team, developed compiler follows basic xml rules.


Basic XML  rules:

1.every opened element must be closed
  <h1>Hello</h1>
  <Welcome></Welcome>
 some elements may not have closing tag
  <img /> : image element has no child elements : self closing. 

eg:

import React from 'react'
import { createRoot } from 'react-dom/client'

const Heading = ()=>{

    return <h1>Hello 
}

createRoot(document.getElementById('root')).render(<Heading></Heading>)

self closing:

import React from 'react'
import { createRoot } from 'react-dom/client'

const Heading = ()=>{
    return <h1>Hello </h1>
}

createRoot(document.getElementById('root')).render(<Heading/>)
....................................................................................

2. In xml you must have one single root element.
  all elements must be organized under single root element.

 <h1>Welcome to React</h1>
 <p>Path finder</p>

In html what can be root element
 <div>,<span>,all html 5 layout elements header,footer,section,aside...

import React from 'react'
import { createRoot } from 'react-dom/client'

const Heading = () => {
    return <div><h1>Marsh McLennan</h1>
        <p>Marsh McLennan is the world’s leading professional services firm in risk, strategy and people</p>
    </div>
}

createRoot(document.getElementById('root')).render(<Heading />)


In the above code, i have to use "div" element manually, if not ,it will throw error, some times i dont want root element

.....................................................................................
			  Fragments
....................................................................................

Fragements are used to wrap elements invisible way.

Suppose if i dont want any root element, then we can use Fragement.

Fragements are used to escape from compiler.
		


Syntax:

 <React.Fragment></React.Fragement>

 <Fragment></Fragement>

 <></>

const Heading = () => {
    return <>
        <h1>Marsh McLennan</h1>
        <p>Marsh McLennan is the world’s leading professional services firm in risk, strategy and people</p>
    </>
}
createRoot(document.getElementById('root')).render(<Heading />)

....................................................................................

Rule 3:
    Every Component name must start with Uppercase, should be Noun.



import React from 'react'
import { createRoot } from 'react-dom/client'

const heading = () => {
    return <>
        <h1>Marsh McLennan</h1>
        <p>Marsh McLennan is the world’s leading professional services firm in risk, strategy and people</p>
    </>
}
createRoot(document.getElementById('root')).render(<heading />)

Warning: The tag <heading> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.
    at heading
.....................................................................................				UI Structure and React Components
			    Component Composition
.....................................................................................

Components are created indivually, organized as tree.



import React from 'react'
import { createRoot } from 'react-dom/client'

const Heading = () => {

    return <header>
        <h1> Marsh McLennan</h1>
    </header>
}
const Body = () => {

    return <section>
        <p>
            Marsh McLennan is the world’s leading professional services firm in risk, strategy and people.
        </p>
        <p>
            We bring together experts from across our four global businesses — Marsh, Guy Carpenter, Mercer and Oliver Wyman — to help make organizations more successful and societies more resilient
        </p>
    </section >
}
const Footer = () => {
    return <footer>
        <h3>Marsh McLennan is the leader in risk, strategy and people, helping clients navigate a dynamic environment through four global businesses</h3>
    </footer>
}

const Page = () => {
    return <>
        <Heading />
        <Body />
        <Footer />
    </>
}
const App = () => {
    return <Page />
}


createRoot(document.getElementById('root')).render(<App/>)

....................................................................................
			Structuring React apps
		  Component Composition and Modularity
.....................................................................................

Every Component will go into separate folders and files, through es 6 modules you can import export components..


Every Component will go into separate folders and files, through es 6 modules you can import export components..

https://legacy.reactjs.org/docs/faq-structure.html

Is there a recommended way to structure React projects?

React doesn’t have opinions on how you put files into folders. That said there are a few common approaches popular in the ecosystem you may want to consider.

Grouping by features or routes

common/
  Avatar.js
  Avatar.css
  APIUtils.js
  APIUtils.test.js
feed/
  index.js
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  FeedAPI.js
profile/
  index.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css
  ProfileAPI.js

Grouping by file type
api/
  APIUtils.js
  APIUtils.test.js
  ProfileAPI.js
  UserAPI.js
components/
  Avatar.js
  Avatar.css
  Feed.js
  Feed.css
  FeedStory.js
  FeedStory.test.js
  Profile.js
  ProfileHeader.js
  ProfileHeader.css




const Page = () => {
    return <div>
        <Heading />
        <Body />
        <Footer />
    </div>
}
const App = () => {
    return <Page />
}


createRoot(document.getElementById('root')).render(<App/>)
.....................................................................................
				
src/header/Header.jsx

export const Heading = () => {
    return <header>
        <h1> Marsh McLennan</h1>
    </header>
}

src/footer/Footer.jsx

export const Footer = () => {
    return <footer>
        <h3>Marsh McLennan is the leader in risk, strategy and people, helping clients navigate a dynamic environment through four global businesses</h3>
    </footer>
}

src/body/Body.jsx
export const Body = () => {

    return <section>
        <p>
            Marsh McLennan is the world’s leading professional services firm in risk, strategy and people.
        </p>
        <p>
            We bring together experts from across our four global businesses — Marsh, Guy Carpenter, Mercer and Oliver Wyman — to help make organizations more successful and societies more resilient
        </p>
    </section >
}
src/page.jsx
import { Heading } from './heading/Heading'
import { Body } from './body/Body'
import { Footer } from './footer/Footer'

export const Page = () => {
    return <>
        <Heading />
        <Body />
        <Footer />
    </>
}

src/main.jsx

import React from 'react'
import { createRoot } from 'react-dom/client'
import { Page } from './page'

const App = () => {
    return <Page />
}

createRoot(document.getElementById('root')).render(<App />)

.....................................................................................
			 React Dev tool
.....................................................................................

It is tool part of browser as plugin, used to insepect the structure of app.
https://react.dev/learn/react-developer-tools

.....................................................................................
			How to add css in react
.....................................................................................


1.Your own css
2.thrid party css frameworks - bootstrap

class
style - This will see later

if yo want to use bootstrap

npm i bootstrap

src/main.jsx

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
// import './index.css'
import 'bootstrap/dist/css/bootstrap.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

.....................................................................................
			 Data && React
....................................................................................

Data Binding:

Data can be attached in react using {}

How to represent data?
->primitives - string,numbers,boolean
->objects - object,arrays

How to bind data?
  {variable} {expression}
 
  {a} {fun()} {10*2} {isHidden ? 'Show':'Hide'} 

..................................................................................
			   Data Binding Patterns

1.property binding aka props pattern
2.State binding aka state pattern.

props Pattern:

npm create vite@latest

props-pattern
.....................................................................................

	When you think about component , you should thing about resuablity..

Basic Data binding:

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

//Profile Component : Profile information.

const Profile = () => {
    //profile data
    const id = 1
    const name = "Subramanian"
    const gender = "Male"
    const status = true
    return <div>
        <h1>Profile Information</h1>
        <p>Id : {id}</p>
        <p>Name:  {name}</p>
        <p>Gender:  {gender}</p>
        <p>Status : {status ? "Available" :"Not Available"}</p>
    </div>
}
//Gallery Component : Displays many profiles

const Gallery = () => {
    return <>
        <Profile />
    </>
}

const App = () => {
    return <>
        <Gallery />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

In the above code, the profile components shows only "Subramnaian" data , what if i want to show different profile informations.

			Apply Resuablity Pattern

Solution Property Pattern:

 Passing data to the component as parameter, so that the component will display different data.

How to pass data to the component from parent component?

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

//Profile Component : Profile information.

const Profile = (id, name, gender, status) => {
    return <div>
        <h1>Profile Information</h1>
        <p>Id : {id}</p>
        <p>Name:  {name}</p>
        <p>Gender:  {gender}</p>
        <p>Status : {status ? "Available" : "Not Available"}</p>
    </div>
}
//Gallery Component : Displays many profiles

const Gallery = () => {
    //profile data
    const id = 1
    const name = "Subramanian"
    const gender = "Male"
    const status = true
    return <>
        {/* <Profile /> */}
        {Profile(id, name, gender, status)}
        {Profile(2, 'Murugan', "Male", false)}
    </>
}

const App = () => {
    return <>
        <Gallery />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

What if i use declarative syntax - <Profile >


import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

//Profile Component : Profile information.
//props is just variable Name, it can be any name
//props value is just object, which collects all data sent from the parent component
const Profile = (props) => {
    console.log(props)
    return <div>
        <p>Id : {props.id}</p>
        <p>Name:  {props.name}</p>
        <p>Gender:  {props.gender}</p>
        <p>Status : {props.status ? "Available" : "Not Available"}</p>
    </div>
}
//Gallery Component : Displays many profiles

const Gallery = () => {
    //profile data
    const id = 1
    const name = "Subramanian"
    const gender = "Male"
    const status = true
    return <>
            <h1>Profile Information</h1>

        {/* {Profile(id, name, gender, status)}
        {Profile(2, 'Murugan', "Male", false)} */}
        <Profile id={id} name={name} gender={gender} status={status} />
        <Profile id={2} name="Murugan" gender="Male" status={true} />
        <Profile id={3} name="Karthik" gender="Male" status={true} />
        <Profile id={4} name="Arun" gender="Male" status={true} />
        <Profile id={5} name="John" gender="Male" status={true} />
        <Profile id={5} name="Ahmed" gender="Male" status={true} />

    </>
}

const App = () => {
    return <>
        <Gallery />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
.....................................................................................
			  Default Props
.....................................................................................

if property not passed you can supply default props.

How to supply default props?

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

//old way
// const Profile = (props) => {
//     return <div>
//         <p>Id : {props.id}</p>
//         <p>Name:  {props.name}</p>
//         <p>Gender:  {props.gender}</p>
//         <p>Status : {props.status ? "Available" : "Not Available"}</p>
//     </div>
// }
// //default Profile Props
// Profile.defaultProps = {
//     id: 0,
//     name: 'name',
//     gender: 'Male',
//     status: false
// }

//new way
const Profile = ({ id = 0, name = "name", gender = "Male", status = true }) => {
    return <div>
        <p>Id : {id}</p>
        <p>Name:  {name}</p>
        <p>Gender:  {gender}</p>
        <p>Status : {status ? "Available" : "Not Available"}</p>
    </div>
}


const Gallery = () => {
    const id = 1
    const name = "Subramanian"
    const gender = "Male"
    const status = true
    return <>
        <h1>Profile Information</h1>

        <Profile id={id} name={name} gender={gender} status={status} />
        <Profile id={2} name="Murugan" gender="Male" status={true} />
        <Profile id={3} name="Karthik" gender="Male" status={true} />
        <Profile id={4} name="Arun" gender="Male" status={true} />
        <Profile id={5} name="John" gender="Male" status={true} />
        <Profile id={5} name="Ahmed" gender="Male" status={true} />
        <Profile name="Marsh" />
    </>
}

const App = () => {
    return <>
        <Gallery />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
.....................................................................................
			ES 6 Feature - Object destructuring
....................................................................................


// function display(profile) {
//     //display values
//     console.log(`Id ${profile.id}`)
//     console.log(`Name ${profile.name}`)
//     console.log(`Id ${profile.address.city}`)
// }

//using object destructuring , we can simplify object property display
// function display(profile) {
//     //syntax
//     const { id, name, address } = profile
//     console.log(`Id ${id}`)
//     console.log(`Name ${name}`)
//     console.log(`Id ${address.city}`)
// }

// function display(profile) {
//     //syntax
//     const { id, name, address: { city } } = profile
//     console.log(`Id ${id}`)
//     console.log(`Name ${name}`)
//     console.log(`Id ${city}`)
// }


// function display({ id, name, address: { city } }) {
//     console.log(`Id ${id}`)
//     console.log(`Name ${name}`)
//     console.log(`Id ${city}`)
// }
const display = ({ id, name, address: { city } }) => {
    console.log(`Id ${id}`)
    console.log(`Name ${name}`)
    console.log(`Id ${city}`)
}

display({ id: 1, name: 'Subramanian', address: { city: 'Coimbatore' } })


//return objects and destructuring

// function getStockValues() {
//     return {
//         id: 1,
//         name: 'google',
//         value: 1000,
//         qty: 100000
//     }
// }

// function getStockValues(id = 1, name = 'google', value = 0, qty = 0) {
//     return {
//         id: id,
//         name: name,
//         value: value,
//         qty: qty
//     }
// }
// function getStockValues(id = 1, name = 'google', value = 0, qty = 0) {

//     //key:variable if it is same, remove one variable and :
//     return {
//         id,
//         name,
//         value,
//         qty
//     }
// }
// const getStockValues = (id = 1, name = 'google', value = 0, qty = 0) => {
//     return {
//         id,
//         name,
//         value,
//         qty
//     }
// }
const getStockValues = (id = 1, name = 'google', value = 0, qty = 0) => ({
    id,
    name,
    value,
    qty
})
console.log(getStockValues(1, "google", 2000, 1222))
console.log(getStockValues())

.....................................................................................
			 How to apply property destructuring
.....................................................................................
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

// const Profile = (props) => {
//     return <div>
//         <p>Id : {props.id}</p>
//         <p>Name:  {props.name}</p>
//         <p>Gender:  {props.gender}</p>
//         <p>Status : {props.status ? "Available" : "Not Available"}</p>
//     </div>
// }
// const Profile = (props) => {
//     const { id, name, gender, status } = props
//     return <div>
//         <p>Id : {id}</p>
//         <p>Name:  {name}</p>
//         <p>Gender:  {gender}</p>
//         <p>Status : {status ? "Available" : "Not Available"}</p>
//     </div>
// }
const Profile = ({ id, name, gender, status }) => <div>
    <p>Id : {id}</p>
    <p>Name:  {name}</p>
    <p>Gender:  {gender}</p>
    <p>Status : {status ? "Available" : "Not Available"}</p>
</div>

const Gallery = () => {
    const id = 1
    const name = "Subramanian"
    const gender = "Male"
    const status = true
    return <>
        <h1>Profile Information</h1>

        {/* {Profile(id, name, gender, status)}
        {Profile(2, 'Murugan', "Male", false)} */}
        <Profile id={id} name={name} gender={gender} status={status} />
        <Profile id={2} name="Murugan" gender="Male" status={true} />
        <Profile id={3} name="Karthik" gender="Male" status={true} />
        <Profile id={4} name="Arun" gender="Male" status={true} />
        <Profile id={5} name="John" gender="Male" status={true} />
        <Profile id={5} name="Ahmed" gender="Male" status={true} />

    </>
}

const App = () => {
    return <>
        <Gallery />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
......................................................................................			 Property Rethrow
....................................................................................
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

// const Profile = props => <div>
//     {/* Here we pass every prop manually, this is complex */}
//     <ProfileDashboard id={props.id} name={props.name} status={props.status} />
// </div>

//Property Rethrow is a concept through which we can simplify property passing
const Profile = props => <div>
    {/* passing entire props via es6 spread noation */}
    <ProfileDashboard {...props} title="Your Profile" />
</div>

const ProfileDashboard = ({ id = 1, title = "", name = 'Subramaian', gender = 'Male', status = true }) => {
    return <>
        <h3>{title}</h3>
        <p>Id : {id}</p>
        <p>Name:  {name}</p>
        <p>Gender:  {gender}</p>
        <p>Status : {status ? "Available" : "Not Available"}</p>
    </>
}

const Gallery = () => {
    const id = 1
    const name = "Subramanian"
    const gender = "Male"
    const status = true
    return <>
        <h1>Profile Information</h1>
        <Profile id={id} name={name} gender={gender} status={status} />
        <Profile id={2} name="Murugan" gender="Male" status={true} />
        <Profile id={3} name="Karthik" gender="Male" status={true} />
        <Profile id={4} name="Arun" gender="Male" status={true} />
        <Profile id={5} name="John" gender="Male" status={true} />
        <Profile id={5} name="Ahmed" gender="Male" status={true} />
        <Profile />
    </>
}

const App = () => {
    return <>
        <Gallery />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

.....................................................................................				Inline Styling
....................................................................................

<div class="cssClass">

<div style={}>

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

const Header = () => {

    return <div>
        <h1 style={styles.heading}>Header</h1>
        <h2 style={{ color: 'blue', fontFamily: "sans-serif" }}>Your Company Goes Here</h2>
    </div>
}
const styles = {
    heading: {
        color: 'red'
    }
}


const App = () => {
    return <Header>

    </Header>
}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)

.....................................................................................
				What can be prop
.....................................................................................

1.Prop can be data
2.Prop can another component or element
..
3.Prop can be function
4.Prop can be state(dynamic prop)



		
			Prop can another component or element
			.....................................

How to render component

 <Grid>
   //here you can pass something
 </Grid> -  Grid can have children: passing prop
 
 <Grid/> -  Grid has no children
 
Parent-Child Relation ship:
............................

Way 1:

cont A = ()=>{
  return <B/>
}
cont B = ()=>{
  return <h1>test</h1>
}

Here A is parent and B is child

Way 2: pass child component as prop

Parent-Child Relation ship:
 via props

<Layout> -parent
	<Page>-child
		<Header> -child
		   <Logo> -child

		   </Image>
		</Header>
	</Page>
</Layout>

eg:

Parent-Child without props;

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

const Title = props => {
    return <h2>Title goes</h2>
}

const Header = () => {
    return <div>
        <Title />
    </div>
}


const App = () => {
    return <>
        <Header />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

Here , what is draback of Header, Header is having Title, but is tightly coupled,
what if i want to replace title with Different Component in future, you have to change the Header Component.

What if Header component is from third party, then how to change it?
  It is not possible.

If component wants to display child components dynamically, loosly coupled way, then we have to pass component as prop.

eg:
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

const Title = props => {
    return <h2>Title goes</h2>
}

const Header = ({ children }) => {
    return <div>
        {/* <Title /> */}
        {/* {props.children} */}
        {children}
    </div>
}
const Carousel = props => {
    return <div>
        <h1>Carousel</h1>
    </div>
}


const App = () => {
    return <>
        {/* <Header /> */}
        <Header>
            {/* Component as prop */}
            {/* <Title /> */}
            <Carousel />
        </Header>
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
....................................................................................
			  Rendering List
.....................................................................................

Simple List:
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

//
const List = ({ numberList }) => {
    return <>
        <ul>
            {
                //loop iterate array.
                // numberList.map(item => {
                //     return <li>{item}</li>
                // })
                numberList.map(item => <li>{item}</li>)
            }
        </ul>
    </>
}

const App = () => {
    const numberList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    return <>
        <List numberList={numberList} />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

Object List:
............
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { PRODUCTS } from './mock-data/products'


const ProductsList = ({ products }) => {
    return <div>
        {
            products.map(({ id, image, title, description, category, rating: { rate, count } }) => {
                return <div key={id}>
                    <h2>{title}</h2>
                    <img src={image} height={200} width={200} />
                    <span>{category}</span>
                    <section>
                        <p>{description}</p>
                        <h4> Price : {rate}$   Available Stock: {count}</h4>
                    </section>
                </div>
            })
        }
    </div>
}

//todo: Create Product component which should display production information:
//you have to pass all product details from the Productlist component as prop

const App = () => {
    return <>
        <ProductsList products={PRODUCTS} />
    </>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
...................................................................................
			   State Pattern
		       (Dynamic User Interface)
			 (Event Handling)
....................................................................................

What is state?
  State is another way of representing data in React.

As of we have seen data is not changing or updating...

How to introduce State?

There are two ways

1.class pattern 
   It is legacy way of representing state and Managining state
   It is not recommended..

2.Function pattern
    It is modern way of representing state
    State is represented via "Hooks".


1.class pattern 

Declare class:
import React from 'react';
import ReactDOM from 'react-dom';


class Review extends React.Component {

    render() {
        return <div>
            <h1>Review Component</h1>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
..................................................................................
Declare data:

React.Component is super class , which is having properites and methods

Methods:

1.lifecycle methods
2.setState
3.forceUpdate()

Instance Properties

1.state
2.props

state default value is null, that means we need to initalize state variable with data.

import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    render() {
        console.log(this.state)
        return <div>
            <h1>Review Component</h1>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);

here out put would be "null"

...

How to declare state?

import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    //state declaration
    state = {
        //application data/ui data
        like: 0
    }

    render() {
        console.log(this.state)
        return <div>
            <h1>Review Component</h1>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);
..............
How to bind state in UI, what is initial state.

Initial state means, the state(data) is associated with UI during first rendering.

import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    //state declaration
    state = {
        //application data/ui data
        like: 10
    }

    render() {
        console.log(this.state)
        return <div>
            <h1>Review Component</h1>
            <h5>Like {this.state.like}</h5>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);

....................................................................................
			  Event Handler
....................................................................................
import React from 'react';
import ReactDOM from 'react-dom/client';


class Review extends React.Component {

    //state declaration
    state = {
        //application data/ui data
        like: 10
    }
    //listener: arrow function
    onLike = () => {
        console.log('like')
    }
    render() {
        console.log(this.state)
        return <div>
            <h1>Review Component</h1>
            <h5>Like {this.state.like}</h5>
            <button onClick={this.onLike}>😁</button>
        </div>
    }
}


const App = () => {
    return <>
        <Review></Review>
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />
);



.................................................................................
		Before writing code, we need to learn the concept
....................................................................................
			Functional Programming principles
....................................................................................
Programming paradigms:
 any programming language is built on the top of programming paradigms
 Collections of set of principles and concepts.

Most popular programming paradigms.
1.Object oriented
   C++,java,C#......
2.Procedural oriented
   C
3.Functional Programming 
   LISP,Clojure,scheme,js

Some languages follow multiple paradigms (hybrid) , some follow single paradigm (solo)

javascript is object based, functional style programming language.
java is object oriented,functional style programming...

What is functional programming?

  It is type of programming paradigm.

functional programming is the first programming paradagim introduced in 1935, as part of Mathmetics called "Lambda Calculs".

The first functional programming language called "LISP" was created in 1955.

React uses fp principles:

1.Pure functions
2.Immuablity


Pure Functions:

Pure functions are defined by two rules..

Rule A:
  if function receives input, the function returns the input without any mutation...

//fp principles : rule A:


//is this function is pure or not : pure 
function Hello(message) {
    return message
}
console.log(Hello('hello'))

//is this function is pure or not: impure function
function doubleIt(value) {
    return value * 2
}
console.log(doubleIt(20))

Are we applying pure function rule a in React?


Yes,With Respect to "props" every function is pure.

//Pure function rule A in react.
import ReactDOM from 'react-dom/client';

//Every component is  based on pure function with respect to "props"
const Welcome = props => {
    //props.message = 'hai' // props are read only
     return <div>
        <h1>{props.message}</h1>
    </div>
}

const App = () => {
    return <>
        <Welcome message="hello" />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
.....................................................................................
				Pure Function Rule B
....................................................................................
Rule B:
.......
 if function receives input, what if i want to change(mutate),We can apply rule b.
 
if function receives input,and modify input , we should return new object every time, which is called immutablity.
 



//pure function Rule B


function updateProfile(city, profile) {
    //update profile city 
    profile.city = city
 
    return profile
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)

Result:
before update {name: 'Subramanian', city: 'Coimbatore'}
index.js:18 Same Object
index.js:19 after update {name: 'Subramanian', city: 'Chennai'}

The above code is pure or not?

The above is not pure, it is impure.

 "I need to mutate state(data), but at the same time, i need purity"
			
	                  Apply Immutablity Principle


What is immutability?

  When ever you update the data(object), you have to create new object every time.

In order to write immutable code, js supports many patterns

1. Plain js pattern.
//pure function Rule B

function updateProfile(city, profile) {
    //return new object
    return {
        name: profile.name,
        city: city
    }
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)

Plain js pattern has some drawback, we have to copy all the properties manually...

2.Object.assign pattern
//pure function Rule B

function updateProfile(city, profile) {
    //Object.assign 
    return Object.assign({}, profile, { city: city })
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)

3.ES 7 Spread operator 
//pure function Rule B

function updateProfile(city, profile) {
      return { ...profile, city }
}

let profile = {
    name: 'Subramanian',
    city: 'Coimbatore'
}

console.log('before update', profile)
const result = updateProfile('Chennai', profile)
console.log(profile === result ? "Same Object" : "Different Object")
console.log('after update', result)

.....................................................................................
.....................................................................................
			Arrays -Pure functions (immutablity)
.....................................................................................

Array pure functions:

1.map
  map is pure function , which returns new array when you iterate.

2.filter
  filter is also function, which returns new array when you iterate.

map:


function transform(data) {

    return data.map(item => item)
}

let list = ['subramanian', 'ram', 'murugan']

const response = transform(list)

console.log(list === response ? "Same" : "Different")

filter:


function filter(data) {

    return data.filter(item => item.status === true)
}

let employees = [{
    id: 1,
    name: 'subramanian',
    status: true
},
{
    id: 2,
    name: 'Ram',
    status: false
},
{
    id: 3,
    name: 'Karthik',
    status: true
},
{
    id: 4,
    name: 'Murugan',
    status: false
}

]

const response = filter(employees)

console.log(employees === response ? "Same" : "Different")
.....................................................................................

Add Item:

push


//is it pure or not
function add(todos, todo) {
    return todos.push(todo)
}
let todos = [{
    title: 'Learn react',
    done: true
}];

//Testing 
Object.freeze(todos)

console.log(add(todos, { title: 'Learn Microservices', done: false }));


Response:
Uncaught TypeError: Cannot add property 1, object is not extensible

You are trying to add  on exiting memory... which is not pure and immutable...

so "array.push" is not pure function.

How to add item into array with purity:

Solution:

1.concat
   it is pure and immutable method..

//is it pure or not
function add(todos, todo) {
   // return todos.push(todo)
   return todos.concat(todo)
}
let todos = [{
    title: 'Learn react',
    done: true
}];

//Testing 
Object.freeze(todos)

console.log(add(todos, { title: 'Learn Microservices', done: false }));

2.Using spread operator

//is it pure or not
function add(todos, todo) {
    // return todos.push(todo)
    //  return todos.concat(todo)
    return [...todos, todo]
}
let todos = [{
    title: 'Learn react',
    done: true
}];

//Testing 
Object.freeze(todos)

console.log(add(todos, { title: 'Learn Microservices', done: false }));
....................................................................................
import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

class Like extends React.Component {

    state = {
        value: 0
    }
    //Event Listener
    onIncrement = () => {
        //through pure function only we can mutate the state
        //prevState is just variable holding "State Object"
        this.setState((prevState) => {
            //return immutable object
            // return {
            //     value: prevState.value+1
            // }
            // return Object.assign({}, prevState, { value: prevState.value + 1 })
            return { ...prevState, value: prevState.value + 1 }
        })
    }

    render() {
        console.log(this.state)
        const { value } = this.state
        return <div>
            {/* <h1>Like {this.state.value}</h1> */}
            <h1>Like {value}</h1>
            <button onClick={this.onIncrement}>Like</button>
        </div>
    }
}

const App = () => {
    return <>
        <Like />
    </>

}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
.....................................................................................
			  Multi state
....................................................................................
import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

class Review extends React.Component {

    state = {
        like: 0,
        dislike: 0
    }
    //listener
    onLike = () => {
        this.setState((prevState) => {
            //return immutable object
            return { ...prevState, like: prevState.like + 1 }
        })
    }
    onDislike = () => {
        this.setState((prevState) => {
            //return immutable object
            return { ...prevState, dislike: prevState.dislike + 1 }
        })
    }

    render() {
        console.log(this.state)
        return <>
            <h1>Review</h1>
            <h2>Like: {this.state.like} Dislike: {this.state.dislike}</h2>
            <button onClick={this.onLike}>Like</button>
            <button onClick={this.onDislike}>Dislike</button>

        </>
    }
}

const App = () => {
    return <Review />
}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
......................................................................................
				Inline Listener
.....................................................................................

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

class Review extends React.Component {

    state = {
        like: 0,
        dislike: 0
    }

    render() {
        console.log(this.state)
        return <>
            <h1>Review</h1>
            <h2>Like: {this.state.like} Dislike: {this.state.dislike}</h2>
            {/* inline listener */}
            <button onClick={() => {
                this.setState((prevState) => {
                    //return immutable object
                    return { ...prevState, like: prevState.like + 1 }
                })
            }}>Like</button>
            <button onClick={() => {
                this.setState((prevState) => {
                    //return immutable object
                    return { ...prevState, dislike: prevState.dislike + 1 }
                })
            }}>Dislike</button>

        </>
    }
}

const App = () => {
    return <Review />
}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)
.....................................................................................
.....................................................................................
				Nested State
....................................................................................

state= {
   house:{
     name:'RavenClaw',
     points:10
   }
}

import React from 'react'
import ReactDOM from 'react-dom/client'
import './index.css'

class Review extends React.Component {

    state = {
        house: {
            name: 'RavenClaw',
            points: 10
        }
    }

    render() {
        return <>
            <h1>Review</h1>
            <h2>House {this.state.house.name}</h2>
            <h2>Points {this.state.house.points}</h2>
            <button onClick={() => {
                this.setState((prevState) => {
                    //return immutable object
                    return {
                        ...prevState, //level-0 copy
                        house: {
                            ...prevState.house, // level -1 copy
                            points: prevState.house.points + 2
                        }

                    }
                })
            }}>Like</button>

        </>
    }
}

const App = () => {
    return <Review />
}

ReactDOM.createRoot(document.getElementById('root')).render(
    <React.StrictMode>
        <App />
    </React.StrictMode>,
)

.....................................................................................
				Deep Nesting
.....................................................................................

Assigment:
    state = {
        customer: {
            id: 1,
            name: 'Subramanian',
            contact: {
                address: {
                    city: 'Chennai'
                },
                communcation: {
                    mobileNo: '9000000'
                }
            }
        }
    }

How to update mobileNo - 834343434

.....................................................................................
		      Complxity of Immutable Objects 
				 and 
			How to solve  them using 
			     immer.js
.....................................................................................
What is immer?
  immer is simple js lib, which helps to write complex immutable code in "mutable way" like regular javascript way.

immutable syntax to update object property:

    state = {
        house: {
            name: 'RavenClaw',
            points: 10
        }
    }

     return {
                ...prevState, //level -0 copy
                house: {
                    ...prevState.house, // level-1 copy
                    points: prevState.house.points + 2
                }
        }

js syntax:

    state = {
        house: {
            name: 'RavenClaw',
            points: 10
        }
    }

update state:

state.house.points +=2

immer is lib which takes care of writing immutable code on behalf of us, developer writes mutable code, immer converts into immutable code.

Immer core concept:

immer provides a function called "produce"

produce(state,(draft)=>{
  draft.house.points +=2
})

Getting started:

steps:

1.install immer lib

npm i immer

import React, { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { produce } from 'immer'

class Review extends React.Component {
    state = {
        house: {
            name: 'RavenClaw',
            points: 10
        }
    }

    render() {
        return <div>
            <h1>House Review</h1>
            <h2>House Name : {this.state.house.name}</h2>
            <h2>Review Pointers : {this.state.house.points}</h2>
            <button onClick={() => {
                this.setState((prevState) => {
                    //old way : using raw immutable logic
                    // return {
                    //     ...prevState, // level-0 copy: copy all outside keys
                    //     house: {
                    //         ...prevState.house, //level-1 Copy: copy all house keys
                    //         points: prevState.house.points + 1
                    //     }
                    // }
                    return produce(prevState, (draft) => {
                        draft.house.points += 1
                    })
                })
            }}>Rate</button>
        </div>
    }
}
const App = () => {
    return <Review />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

............

import React, { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { produce } from 'immer'

class Customer extends React.Component {
    state = {
        customer: {
            id: 1,
            name: 'Subramanian',
            contact: {
                address: {
                    city: 'Chennai'
                },
                communcation: {
                    mobileNo: '9000000'
                }
            }
        }
    }
    render() {
        return <div>
            <h1>Customer info</h1>
            <h2>Name : {this.state.customer.name}</h2>
            <h2>Phone : {this.state.customer.contact.communcation.mobileNo}</h2>
            <button onClick={() => {
                this.setState((prevState) => {
                    // return {
                    //     ...prevState, // leve-0 copy
                    //     customer: {
                    //         ...prevState.customer, // level-1 copy
                    //         contact: {
                    //             ...prevState.customer.contact, // level-2 copy
                    //             communcation: {
                    //                 ...prevState.customer.communcation,
                    //                 mobileNo: '4444444'
                    //             }
                    //         }
                    //     }
                    // };
                    return produce(prevState, (draft) => {
                        draft.customer.contact.communcation.mobileNo = '8888888'
                    })

                })
            }}>Update Mobile No</button>
        </div>
    }
}
const App = () => {
    return <Customer />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
...........................&&&&&&&&&&&&&&...........................................
		 State and function as prop
..................................................................................



import React from 'react';
import ReactDOM from 'react-dom/client';
import { produce } from 'immer';
import './index.css'

class HouseRating extends React.Component {

    state = {
        house: {
            name: 'RavenClaw',
            points: 10
        }
    }
    onIncreasePointsByTwo = () => {
        this.setState((prevState) => {
            return produce(prevState, (draft) => {
                draft.house.points += 2
            })

        })
    }
    render() {
        return <>
            {/* here state as prop(dynamic prop) and function as prop */}
            <HouseRatingDashBoard {...this.state} onIncrement={this.onIncreasePointsByTwo} />
        </>
    }
}

const HouseRatingDashBoard = props => {
    console.log
    return <div>
        <h1>House Rating Component</h1>
        <h3>House Name : {props.house.name}</h3>
        <h3>Points : {props.house.points}</h3>
        <button onClick={props.onIncrement}>Rate</button> 
    </div>
}


const App = () => {
    return <>
        <HouseRating />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);
.....................................................................................
...................................................................................
			 Component Life cycles
.....................................................................................

React Component life cycle can be classified into three major phases

1.Mount

2.Update

3.UnMount

1.Mount :
  Incase of class component

 1.constructor
     Called only once in the component initalization
     constructors are not used very much...
 2.render
    Called for creating object tree-component tree-Virtual DOM

 3.componentDidMount
    Called after render method, once the dom is ready- once ui is compltly loaded

    This method is used heavily  used in react all versions.

   It is used to inital data fetching from the apis
   It is used to write any async task
   It is used to write websocket connections


2.Update
    When user starts interacting
   when state is mutated  -setState,forceUpdate
   when new props are supplied -state as prop
  
   render
      method is called after state mutation, in order to update ui with new state/
   during render call,it creates vdom, apply an algorthim called "diff", to compute    old tree and new tree, update dom accordingly.
  
   componentDidUpdate
     It is method which is called after render is completed in update cycle.
    incase if you want fetch data from api after dom updates
    incase if you want to do any async tasks.
    
3.UnMount
  When component is removed from memory
 ComponentWillunMount
   any resource clean up task...


Mount Phase:
...........
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css'

class LifeCycleHooks extends React.Component {

    constructor() {
        super();
        console.log('constructor is called')
    }
    componentDidMount() {
        console.log('ComponentDid Mount is called')
    }

    render() {
        console.log('render is called')
        return <>
            <h1>Component Life Cycle</h1>
        </>
    }
}


const App = () => {
    return <>
        <LifeCycleHooks />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);

Update Phase:
 when you change /mutate state

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css'

class LifeCycleHooks extends React.Component {

    state = {
        value: 0
    }
    constructor() {
        super();
        console.log('constructor is called')
    }
    componentDidMount() {
        console.log('ComponentDid Mount is called')
    }

    componentDidUpdate(){
        console.log('Component Did Update is called')
    }
    render() {
        console.log('render is called')
        return <>
            <h1>Component Life Cycle {this.state.value}</h1>
            <button onClick={() => {
                this.setState((oldState) => {
                    return {
                        value: oldState.value + 1
                    }
                })
            }}>+</button>
        </>
    }
}


const App = () => {
    return <>
        <LifeCycleHooks />
    </>
}


const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);


...................................................................................
			Component Lifes and API Call
...................................................................................

In order to talk to REST API, react has no any opinion regarding which ajax libs should be used

componentDidMount is used for initaling any async task such as api calls,timers...

Popular ajax libs used inside react

1.fetch
2.axios


import React, { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { produce } from 'immer'

class Products extends React.Component {

    state = {
        products: [],
        isLoading: false, //to show spinner
        error: null
    }

    render() {
        const { products, error, isLoading } = this.state
        //conditional rendering: how to use if...else..elseif
        if (error) {
            return <div>
                <h1>Error : {error.message}</h1>
            </div>
        } else if (!isLoading) {
            return <h2>Loading...</h2>
        } else {
            return <div>
                <h1>Products</h1>
                <hr />
                <div>
                    {
                        products.map(product => {
                            return <section>
                                <img src={product.category.image} height={200} width={200} />
                                <h1>{product.title} </h1>
                                <p>{product.description}</p>
                                <h5>{product.price}</h5>
                            </section>
                        })
                    }
                </div>
            </div>
        }

    }
    async componentDidMount() {
        try {
            const url = `https://api.escuelajs.co/api/v1/products`
            const response = await fetch(url)
            const products = await response.json()
            console.log(products)
            this.setState(prevState => {
                return produce(prevState, (draft) => {
                    draft.products = products
                    draft.isLoading = true
                })
            })
        }
        catch (err) {
            console.log(err)
            this.setState(prevState => {
                return produce(prevState, (draft) => {
                    draft.err = err
                    draft.isLoading = true
                })
            })
        }
    }
}
const App = () => {
    return <Products />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

.....................................................................................
			Functional components, state,life cycle methods
					(Hooks)
....................................................................................


What is hooks and why?

Hooks are simple javascript function which holds Component's logic outside component.

"Incase of class component , if you define a biz logic, the similar logic if you have in another component, we can't reuse."

React 16 introduced a feature called hooks, by using hooks you can eleminate class components completly, by keeping functional components

Hooks abstract complex  biz logic in reusable mannager.

React provides lot of built in hooks to build app , as simple as possible , mean time you can create your own hooks (custom hooks).

Hooks features:

1.hook is simple js function
2.hook can take input and also return values
3.every hook function starts with "useHookName"


Common Built in Hooks

1.useState
   To declare state and mutation inside functions
2.useEffect
   It represents "Life Methods" - compoentDidMount,componentDidUpdate
3.useContext
4.useRef
5.useMemo
6.useCallback
etc......

Thanks to class components,goodbye to class components....
.....................................................................................
State declaration,mutation:
...........................

useState:

Syntax:

const [state,setState]=useState(initalState)

state -is just variable it could be any thing,represents current state
setState -  pure function its name generally setVariableName, A function that updates state

const [counter,setCounter]=useState(initalState)

initalState could be

1.primitive values numbers,string,boolean
2.objects
3.arrays

const [counter,setCounter]=useState(0)
const [state,setState]=useState('hello')
const [state,setState]=useState(false)
const [state,setState]=useState(null)
const [state,setState]=useState({count:0})
const [state,setState]=useState([])
			


import React, { StrictMode, useState } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

const Review = () => {
    const [like, setLike] = useState(0)

    // const onLike = () => {
    //     //immutable object internally
    //     // setLike((prevState) => {
    //     //     return prevState + 1
    //     // })
    //     // setLike((prevState) => prevState + 1)
    //     setLike(like + 1)

    // }
    return <div>
        <h1>Review</h1>
        <h2>Like : {like}</h2>
        <button onClick={() => setLike(like + 1)}>like</button>
    </div>
}

const App = () => {
    return <Review />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
....................................................................................
				Multi State
.....................................................................................
import React, { StrictMode, useState } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

const Review = () => {
    const [like, setLike] = useState(0)
    const [dislike, setDislike] = useState(0)
    return <div>
        <h1>Review</h1>
        <h2>Like : {like}  Dislike : {dislike}</h2>
        <button onClick={() => setLike(like + 1)}>like</button>
        <button onClick={() => setDislike(dislike + 1)}>Dislike</button>
    </div>
}

const App = () => {
    return <Review />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
....................................................................................
			 Hooks and Objects
...................................................................................
import React, { StrictMode, useState } from 'react'
import { createRoot } from 'react-dom/client'
import { produce } from 'immer'
import './index.css'

const Review = () => {
    const [review, setReview] = useState({ like: 0, dislike: 0 })

    const onLike = () => {
        // setReview(prevState => {
        //     return {
        //         ...prevState, like: prevState.like + 1
        //     }
        // })
        setReview(prevState => produce(prevState, (draft) => {
            draft.like += 1
        }))
    }
    return <div>
        <h1>Review</h1>
        <h2>Like : {review.like}  Dislike : {review.dislike}</h2>
        <button onClick={onLike}>like</button>
        <button onClick={() => setReview(prevState => produce(prevState, (draft) => {
            draft.dislike += 1
        }))}>Dislike</button>
    </div>
}

const App = () => {
    return <Review />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
....................................................................................
			Strings update in Hooks
....................................................................................
import React, { StrictMode, useState } from 'react'
import { createRoot } from 'react-dom/client'
import { produce } from 'immer'
import './index.css'

const DashBoard = () => {
    const [color, setColor] = useState('red')

    return <div>
        <h1>Color is {color}</h1>
        <button onClick={() => {
            setColor('blue')
        }}>Blue</button>
    </div>

}

const App = () => {
    return <DashBoard />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
....................................................................................
			Arrays and useState
.....................................................................................
import React, { StrictMode, useState } from 'react'
import { createRoot } from 'react-dom/client'
import { produce } from 'immer'
import './index.css'

const DashBoard = () => {
    const [colors, setColors] = useState(['yellow'])

    return <div>
        <button onClick={() => {
            setColors((prevState) => {
                return produce(prevState, draft => {
                    draft.push('red')
                })
            })

        }}>Add Colors</button>
        <ul>
            {colors.map(color => {
                return <li>{color}</li>
            })}
        </ul>
    </div>

}

const App = () => {
    return <DashBoard />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
.....................................................................................
		   component Life Cycles and Hooks
.....................................................................................

render,componentDidMount,componentDidMount,componentWillUnMount

useEffect:
comonentDidMount,componentDidupdate,componentWillUnMount
    =>useEffect

componentDidMount:
useEffect(()=>{},[]) - useEffect(function,<dependency>)
useEffect(()=>{})    - useEffect(function)

ComponentDidUpdate
useEffect(()=>{},[state])
 here if state is updated, then this hook will be called


import React, { StrictMode, useEffect, useState } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

const Timer = () => {
    const [count, setCount] = useState(0)

    useEffect(() => {
        setTimeout(() => {
            setCount(count + 1)
        }, 1000)
    })

    return <h1>{count} times rendered</h1>

}

const App = () => {
    return <Timer />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

The output it keeps on counting even though it should only count once.

useEffect runs on every render, that means that when the count changes, a render happens, which triggers another effect.

This is not what we want,There are serveral ways to control when side effects run.

We should always include the second parameter which access, an array.

useEffect(()=>{
   //Runs on every render (re-render)
})
...................................................................................
			Runs only First Render
....................................................................................

useEffect(()=>{
 //runs only first render
},[])

import React, { StrictMode, useEffect, useState } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

const Timer = () => {
    const [count, setCount] = useState(0)

    useEffect(() => {
        setTimeout(() => {
            setCount(count + 1)
        }, 1000)
    }, [])

    return <h1>{count} times rendered</h1>

}

const App = () => {
    return <Timer />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
....................................................................................
			 call useEffect based on either state or prop
....................................................................................
import React, { StrictMode, useEffect, useState } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

const Counter = () => {
    const [count, setCount] = useState(0)
    const [calculation, setCalculation] = useState(0)

    //call this every re render : componentDidUpdate
    useEffect(() => {
        setCalculation(calculation + 2)
    }, [count])

    return <>
        <h1>Count : {count}</h1>
        <button onClick={() => setCount(count + 1)}>+</button>
        <h1>Calculation : {calculation}</h1>
    </>

}

const App = () => {
    return <Counter />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
....................................................................................
			componentWillunMount
...................................................................................

To clean up resources...

import React, { StrictMode, useEffect, useState } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

const Timer = () => {
    const [count, setCount] = useState(0)

    useEffect(() => {
        let timer = setTimeout(() => {
            setCount(count + 1)
        }, 1000)
        //componentWillUnMount
        return () => {
            //clean up code
            clearTimeout(timer)
        }

    }, [])

    return <h1>{count} times rendered</h1>

}

const App = () => {
    return <Timer />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
....................................................................................
			API Calls and useEffect
....................................................................................
import React, { StrictMode, useEffect, useState } from 'react'
import { createRoot } from 'react-dom/client'
import { produce } from 'immer'
import './index.css'

const Products = () => {
    const initialState = {
        products: [],
        isLoading: false, //to show spinner
        error: null
    }
    const [state, setState] = useState(initialState)


    //api function
    const getProducts = async () => {
        try {
            const url = `https://api.escuelajs.co/api/v1/products`
            const response = await fetch(url)
            const products = await response.json()
            setState(prevState => {
                return produce(prevState, (draft) => {
                    draft.products = products
                    draft.isLoading = true
                })
            })
        }
        catch (err) {
            console.log(err)
            setState(prevState => {
                return produce(prevState, (draft) => {
                    draft.err = err
                    draft.isLoading = true
                })
            })
        }
    }
    useEffect(() => {
        //api call
        getProducts()
    }, [])

    //conditional rendering: how to use if...else..elseif
    if (state.error) {
        return <div>
            <h1>Error : {error.message}</h1>
        </div>
    } else if (!state.isLoading) {
        return <h2>Loading...</h2>
    } else {
        return <div>
            <h1>Products</h1>
            <hr />
            <div>
                {
                    state.products.map(product => {
                        return <section>
                            <img src={product.category.image} height={200} width={200} />
                            <h1>{product.title} </h1>
                            <p>{product.description}</p>
                            <h5>{product.price}</h5>
                        </section>
                    })
                }
            </div>
        </div>
    }

}

const App = () => {
    return <Products />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
.....................................................................................
			useContext
.....................................................................................

How to share state from parent component to nested child components?

There are two solutions

1.via props
  In this way, props need to be passed manually at every level of component
  this is called "Prop drilling"

2.via context 
   Context is object , using context object you can share state(data), to nested child components or to the app globally.


Props Drilling Eg:
.................
import React, { StrictMode, useState } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

const Parent = () => {
    const [message, setMessage] = useState('hello')

    return <>
        <h1>Parent : {message}</h1>
        <ChildOne message={message} />
    </>
}
const ChildOne = (props) => {
    return <>
        <h1>ChildOne : {props.message}</h1>
        <ChildTwo message={props.message}/>
    </>
}

const ChildTwo = (props) => {
    return <>
        <h1>ChildOne : {props.message}</h1>
        <ChildThree message={props.message}/>

    </>
}
const ChildThree = (props) => {
    return <>
        <h1>ChildOne : {props.message}</h1>
        <ChildFour message={props.message}/>

    </>
}
const ChildFour = (props) => {
    return <>
        <h1>ChildFour : {props.message}</h1>
        <ChildFive message={props.message}/>

    </>
}
const ChildFive = (props) => {
    return <>
        <h1>ChildFive : {props.message}</h1>
    </>
}
const App = () => {
    return <Parent />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)


Using Context Object, how to share data across the app or the tree?

import React, { createContext, StrictMode, useContext, useState } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

//create context object
const MessageContext = createContext()

const Parent = () => {
    const [message, setMessage] = useState('hai')

    return <>
        <MessageContext.Provider value={message}>
            <h1>Parent : {message}</h1>
            <ChildOne />
        </MessageContext.Provider>
    </>
}
const ChildOne = (props) => {
    return <>
        <ChildTwo />
    </>
}

const ChildTwo = (props) => {
    return <>
        <ChildThree />

    </>
}
const ChildThree = (props) => {
    const message = useContext(MessageContext)
    return <>
        <h1>ChildThree Message : {message}</h1>
        <ChildFour />
    </>

}
const ChildFour = (props) => {
    return <>
        <ChildFive />

    </>
}
const ChildFive = (props) => {
    const message = useContext(MessageContext)
    return <>
        <h1>ChildFive Message : {message}</h1>
    </>
}
const App = () => {
    return <Parent />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
....................................................................................
			 Forms and React
....................................................................................


How to declare form?
import React, { StrictMode, useState } from 'react'
import { createRoot } from 'react-dom/client'
import { produce } from 'immer'
import './index.css'

const Form = () => {

    return <div>
        <form>
            <div>
                <label>Name :</label>
                <input />
            </div>
        </form>
    </div>

}

const App = () => {
    return <Form />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)


Handling Forms:
...............
 Handling forms is about how you handle the data when it changes value or gets submmitted.

with respect to text box we can add "onChange" listener

import React, { StrictMode, useState } from 'react'
import { createRoot } from 'react-dom/client'
import { produce } from 'immer'
import './index.css'

const Form = () => {
    const [name, setName] = useState('')

    return <div>
        <form>
            <div>
                <label>Name :</label>
                <input type="text" value={name} onChange={(evt) => {
                    setName(evt.target.value)
                }} />
                {name}
            </div>
        </form>
    </div>

}

const App = () => {
    return <Form />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
...................................................................................
			 How to submit Form
...................................................................................

import React, { StrictMode, useState } from 'react'
import { createRoot } from 'react-dom/client'
import { produce } from 'immer'
import './index.css'

const Form = () => {
    const [name, setName] = useState('')

    //form handler
    const handleSubmit = (evt) => {
        evt.preventDefault()
        //collect data from the state and submit to back end
        console.log(name)
    }
    return <div>
        <form onSubmit={handleSubmit}  >
            <div>
                <label>Name :</label>
                <input type="text" value={name} onChange={(evt) => {
                    setName(evt.target.value)
                }} />
            </div>
            <div>
                <input type="submit" value="save" />
            </div>
        </form>
    </div>

}

const App = () => {
    return <Form />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
.....................................................................................
			Multi Form Control
.....................................................................................

import React, { StrictMode, useState } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

const Form = () => {
    const [firstName, setFirstName] = useState('')
    const [lastName, setLastName] = useState('')

    //form handler
    const handleSubmit = (evt) => {
        evt.preventDefault()
        //collect data from the state and submit to back end
        console.log(firstName,lastName)
    }
    return <div>
        <form onSubmit={handleSubmit}  >
            <div>
                <label>First Name :</label>
                <input type="text" value={firstName} onChange={(evt) => {
                    setFirstName(evt.target.value)
                }} />
            </div>
            <div>
                <label>Last Name :</label>
                <input type="text" value={lastName} onChange={(evt) => {
                    setLastName(evt.target.value)
                }} />
            </div>
            <div>
                <input type="submit" value="save" />
            </div>
        </form>
    </div>

}

const App = () => {
    return <Form />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
....................................................................................
				Select
....................................................................................
import React, { StrictMode, useState } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'

const Form = () => {
    const [firstName, setFirstName] = useState('')
    const [lastName, setLastName] = useState('')
    const [role, setRole] = useState('Developer')

    //form handler
    const handleSubmit = (evt) => {
        evt.preventDefault()
        //collect data from the state and submit to back end
        console.log(firstName, lastName,role)
    }
    return <div>
        <form onSubmit={handleSubmit}  >
            <div>
                <label>First Name :</label>
                <input type="text" value={firstName} onChange={(evt) => {
                    setFirstName(evt.target.value)
                }} />
            </div>
            <div>
                <label>Last Name :</label>
                <input type="text" value={lastName} onChange={(evt) => {
                    setLastName(evt.target.value)
                }} />
            </div>
            <div>
                <label>Role:</label>
                <select value={role} onChange={(evt) => {
                    setRole(evt.target.value)
                }}>
                    <option value="Admin">Admin</option>
                    <option value="Developer">Developer</option>
                    <option value="Hr">Hr</option>
                    <option value="FullStack">FullStack</option>
                </select>
            </div>
            <div>
                <input type="submit" value="save" />
            </div>
        </form>
    </div>

}

const App = () => {
    return <Form />
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

Task:

Explore - radio,password,checkbox,formik lib

.....................................................................................
			 Redux -State Management
.....................................................................................

What is state?
 State is nothing data.

State is managed within component.

What if i want to share the state across the application,there is pattern called "Lift up the state", pass as prop.

In state management , redux is going to act as state layer, react is going act as UI layer.

React and Redux is based on the design pattern "Flux Pattern"


https://facebookarchive.github.io/flux/


Action---->dispatcher----->Store<--->[Reducer] 
			    |
			    |
			 View-React


What is Redux -  Red-reducer + ux (Flux) => Reducer + Flux

What is Reducer?
  Reducer is pure function, which accepts input, returns immutable object...
  Reducer is having biz logic.
  Who calls reducer, reducer is called by store..
  UI Layer never communicates biz logic (reducer) directly.
  UI Layer sends request(action) --via dispatcher---to the store, then store reacts   to that

Core Concepts or Principles:
............................

1.State:
   Redux maintains or stores the data in "single object" Redux is going to store all 
component state into one single object -Application State

const appState = {
  ....   
} called as application state.

How appState is identified for each compoent?

Based on category/module.

const appState = {
  
  order: {
    
  },
  customer: {},
  product:{}

} 
2.Store
   Store is object where Redux application state lives.
   Store offers api to communicate from react and redux to react
   Store is entry and exit point of react and redux
   Per application , there is single store, that store is having state..

3.reducer
    You know very well how to mutate and where mutate state in react
     ->Inside setState pure function.
    Reducer is pure function which returns immutable object.

4.actions
    An action is like request in webserver, redux actions are plain javascript object
 eg:
  let counterAction = {
	type:'counter/increment'
  }
 action may take input also called payload
  let counterByAmount = {
   type:'counter/increment',
   payload:2
 }
5.Dispatcher 
  It is transporter which transport action object from react to redux
  Dispatcher is represented by a method called "dispatch"
  dispatch is part of "Store object"
  store.dispatch(action)
.....................................................................................

Use case: simple counter reducer:
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'

//redux : reducer (initalState,actionObject)
const CounterReducer = (counter = 10, action) => {
  //methods
  switch (action.type) {
    case 'counter/increment':
      return counter + 1
    default:
      //default state
      return counter;
  }
}

//create store object
const appStore = configureStore({
  reducer: {
    counter: CounterReducer
  }
})
///////////////////////////////////////////////////////////////////////////////////////
//React component layer
const Counter = (props) => {
  const counter = useSelector(state => {
    //appState.reducerName
    return state.counter
  })

  const dispatch = useDispatch()

  const onIncrement = () => {
    //action object
    const incrementAction = {
      type: 'counter/increment'
    }
    //dispatch an action to reducer
    dispatch(incrementAction)
  }
  return <div>
    <h1>React Redux</h1>
    <h2>Counter {counter}</h2>
    <button onClick={onIncrement}>+</button>
  </div>
}



///
//connecting react with redux: That should be top level component.

//react-redux lib provides a context object through which we can pass store object into
//react components
const App = () => {
  return <Provider store={appStore}>
    {/* Your components */}
    <Counter />
  </Provider>
}

createRoot(document.getElementById('root')).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
....................................................................................
			 Multi Biz logic
...................................................................................
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'

//redux : reducer (initalState,actionObject)
const CounterReducer = (counter = 10, action) => {
    //methods
    switch (action.type) {
        case 'counter/increment':
            return counter + 1
        case 'counter/decrement':
            return counter - 1
        default:
            //default state
            return counter;
    }
}

//create store object
const appStore = configureStore({
    reducer: {
        counter: CounterReducer
    }
})
///////////////////////////////////////////////////////////////////////////////////////
//React component layer
const Counter = (props) => {
    const counter = useSelector(state => {
        //appState.reducerName
        return state.counter
    })

    const dispatch = useDispatch()

    const onIncrement = () => {
        //action object
        const incrementAction = {
            type: 'counter/increment'
        }
        //dispatch an action to reducer
        dispatch(incrementAction)
    }
    return <div>
        <h1>React Redux</h1>
        <h2>Counter {counter}</h2>
        <button onClick={onIncrement}>+</button>
        <button onClick={() => {
            dispatch({ type: 'counter/decrement' })
        }}>-</button>

    </div>
}



///
//connecting react with redux: That should be top level component.

//react-redux lib provides a context object through which we can pass store object into
//react components
const App = () => {
    return <Provider store={appStore}>
        {/* Your components */}
        <Counter />
    </Provider>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
...................................................................................
			 How to pass input to reducer-payload
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'

//redux : reducer (initalState,actionObject)
const CounterReducer = (counter = 10, action) => {
    //methods
    switch (action.type) {
        case 'counter/increment':
            return counter + 1
        case 'counter/decrement':
            return counter - 1
        case 'counter/incrementBy':
            return counter + action.payload

        default:
            //default state
            return counter;
    }
}

//create store object
const appStore = configureStore({
    reducer: {
        counter: CounterReducer
    }
})
///////////////////////////////////////////////////////////////////////////////////////
//React component layer
const Counter = (props) => {
    const counter = useSelector(state => {
        //appState.reducerName
        return state.counter
    })

    const dispatch = useDispatch()

    const onIncrement = () => {
        //action object
        const incrementAction = {
            type: 'counter/increment'
        }
        //dispatch an action to reducer
        dispatch(incrementAction)
    }
    return <div>
        <h1>React Redux</h1>
        <h2>Counter {counter}</h2>
        <button onClick={onIncrement}>+</button>
        <button onClick={() => {
            dispatch({ type: 'counter/decrement' })
        }}>-</button>
        <button onClick={() => {
            dispatch({ type: 'counter/incrementBy', payload: 2 })
        }}>IncrementBy</button>

    </div>
}



///
//connecting react with redux: That should be top level component.

//react-redux lib provides a context object through which we can pass store object into
//react components
const App = () => {
    return <Provider store={appStore}>
        {/* Your components */}
        <Counter />
    </Provider>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
.....................................................................................
				How to mutate Objects
.....................................................................................

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'

//redux : reducer (initalState,actionObject)
const CounterReducer = (counter = { value: 0 }, action) => {
    //methods
    switch (action.type) {
        case 'counter/increment':
            return { ...counter, value: counter.value + 1 }
        case 'counter/decrement':
            return { ...counter, value: counter.value + 1 }
        case 'counter/incrementBy':
            return { ...counter, value: counter.value + action.payload }

        default:
            //default state
            return counter;
    }
}

//create store object
const appStore = configureStore({
    reducer: {
        counter: CounterReducer
    }
})
///////////////////////////////////////////////////////////////////////////////////////
//React component layer
const Counter = (props) => {
    const result = useSelector(state => {
        //appState.reducerName
        return state.counter
    })

    const dispatch = useDispatch()

    const onIncrement = () => {
        //action object
        const incrementAction = {
            type: 'counter/increment'
        }
        //dispatch an action to reducer
        dispatch(incrementAction)
    }
    return <div>
        <h1>React Redux</h1>
        <h2>Counter {result.value}</h2>
        <button onClick={onIncrement}>+</button>
        <button onClick={() => {
            dispatch({ type: 'counter/decrement' })
        }}>-</button>
        <button onClick={() => {
            dispatch({ type: 'counter/incrementBy', payload: 2 })
        }}>IncrementBy</button>

    </div>
}



///
//connecting react with redux: That should be top level component.

//react-redux lib provides a context object through which we can pass store object into
//react components
const App = () => {
    return <Provider store={appStore}>
        {/* Your components */}
        <Counter />
    </Provider>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)

Task: replace the above code with immer.js produce function
.....................................................................................
			Multi Reducer
.....................................................................................
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'

const CounterReducer = (counter = { value: 0 }, action) => {
    switch (action.type) {
        case 'counter/increment':
            return { ...counter, value: counter.value + 1 }
        case 'counter/decrement':
            return { ...counter, value: counter.value + 1 }
        case 'counter/incrementBy':
            return { ...counter, value: counter.value + action.payload }

        default:
            return counter;
    }
}

const ReivewReducer = (review = { like: 0, dislike: 0 }, action) => {
    switch (action.type) {
        case 'review/like':
            return { ...review, like: review.like + 1 }
        case 'review/dislike':
            return { ...review, dislike: review.dislike + 1 }
        default:
            return review;
    }
}

const appStore = configureStore({
    reducer: {
        counter: CounterReducer,
        review: ReivewReducer
    }
})
///////////////////////////////////////////////////////////////////////////////////////
const Counter = (props) => {
    const result = useSelector(state => {
        return state.counter
    })

    const dispatch = useDispatch()

    const onIncrement = () => {
        const incrementAction = {
            type: 'counter/increment'
        }
        dispatch(incrementAction)
    }
    return <div>
        <h1>React Redux-Counter</h1>
        <h2>Counter {result.value}</h2>
        <button onClick={onIncrement}>+</button>
        <button onClick={() => {
            dispatch({ type: 'counter/decrement' })
        }}>-</button>
        <button onClick={() => {
            dispatch({ type: 'counter/incrementBy', payload: 2 })
        }}>IncrementBy</button>

    </div>
}

const Review = (props) => {
    const result = useSelector(state => {
        return state.review
    })

    const dispatch = useDispatch()
    return <div>
        <h1>React Redux - Review</h1>
        <h2>Like {result.like} Dislike : {result.dislike}</h2>
        <button onClick={() => {
            dispatch({ type: 'review/like' })
        }}>Like</button>
        <button onClick={() => {
            dispatch({ type: 'review/dislike' })
        }}>dislike</button>


    </div>
}


const App = () => {
    return <Provider store={appStore}>
        <Counter />
        <hr />
        <Review />
    </Provider>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
.....................................................................................
		      Action Constants
.....................................................................................
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'

//action constants are just variables
export const counterIncrement = 'counter/increment'
export const counterDecrement = 'counter/decrement'
export const counterIncrementBy = 'counter/incrementBy'
export const reviewLike = 'review/like'
export const reviewDislike = 'review/dislike'


export const CounterReducer = (counter = { value: 0 }, action) => {
    switch (action.type) {
        case counterIncrement:
            return { ...counter, value: counter.value + 1 }
        case counterDecrement:
            return { ...counter, value: counter.value + 1 }
        case counterIncrementBy:
            return { ...counter, value: counter.value + action.payload }
        default:
            return counter;
    }
}

export const ReivewReducer = (review = { like: 0, dislike: 0 }, action) => {
    switch (action.type) {
        case reviewLike:
            return { ...review, like: review.like + 1 }
        case reviewDislike:
            return { ...review, dislike: review.dislike + 1 }
        default:
            return review;
    }
}

export const appStore = configureStore({
    reducer: {
        counter: CounterReducer,
        review: ReivewReducer
    }
})
///////////////////////////////////////////////////////////////////////////////////////
export const Counter = (props) => {
    const result = useSelector(state => {
        return state.counter
    })

    const dispatch = useDispatch()

    const onIncrement = () => {
        const incrementAction = {
            type: counterIncrement
        }
        dispatch(incrementAction)
    }
    return <div>
        <h1>React Redux-Counter</h1>
        <h2>Counter {result.value}</h2>
        <button onClick={onIncrement}>+</button>
        <button onClick={() => {
            dispatch({ type: counterDecrement })
        }}>-</button>
        <button onClick={() => {
            dispatch({ type: counterIncrementBy, payload: 2 })
        }}>IncrementBy</button>

    </div>
}

const Review = (props) => {
    const result = useSelector(state => {
        return state.review
    })

    const dispatch = useDispatch()
    return <div>
        <h1>React Redux - Review</h1>
        <h2>Like {result.like} Dislike : {result.dislike}</h2>
        <button onClick={() => {
            dispatch({ type: reviewLike })
        }}>Like</button>
        <button onClick={() => {
            dispatch({ type: reviewDislike })
        }}>dislike</button>
    </div>
}


const App = () => {
    return <Provider store={appStore}>
        <Counter />
        <hr />
        <Review />
    </Provider>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
.....................................................................................
			  Action Creator
.....................................................................................

action creator is function which returns action object.
action creators are use full when you pass dynamic input to the reducer.

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { configureStore } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'

//action constants are just variables
export const counterIncrement = 'counter/increment'
export const counterDecrement = 'counter/decrement'
export const counterIncrementBy = 'counter/incrementBy'
export const reviewLike = 'review/like'
export const reviewDislike = 'review/dislike'


export const CounterReducer = (counter = { value: 0 }, action) => {
    switch (action.type) {
        case counterIncrement:
            return { ...counter, value: counter.value + 1 }
        case counterDecrement:
            return { ...counter, value: counter.value + 1 }
        case counterIncrementBy:
            return { ...counter, value: counter.value + action.payload }
        default:
            return counter;
    }
}

export const ReivewReducer = (review = { like: 0, dislike: 0 }, action) => {
    switch (action.type) {
        case reviewLike:
            return { ...review, like: review.like + 1 }
        case reviewDislike:
            return { ...review, dislike: review.dislike + 1 }
        default:
            return review;
    }
}

export const appStore = configureStore({
    reducer: {
        counter: CounterReducer,
        review: ReivewReducer
    }
})
///////////////////////////////////////////////////////////////////////////////////////
export const Counter = (props) => {
    const result = useSelector(state => {
        return state.counter
    })

    const dispatch = useDispatch()

    const onIncrement = () => {
        const incrementAction = {
            type: counterIncrement
        }
        dispatch(incrementAction)
    }

    //action creator
    // function incrementBy(payload) {
    //     //returns action object
    //     return {
    //         type: counterIncrementBy,
    //         //payload:payload
    //         payload
    //     }
    // }
    const incrementBy = payload => ({
        type: counterIncrementBy,
        payload
    })


    return <div>
        <h1>React Redux-Counter</h1>
        <h2>Counter {result.value}</h2>
        <button onClick={onIncrement}>+</button>
        <button onClick={() => {
            dispatch({ type: counterDecrement })
        }}>-</button>
        <button onClick={() => {
            dispatch(incrementBy(5))
        }}>IncrementBy</button>

    </div>
}

const Review = (props) => {
    const result = useSelector(state => {
        return state.review
    })

    const dispatch = useDispatch()
    return <div>
        <h1>React Redux - Review</h1>
        <h2>Like {result.like} Dislike : {result.dislike}</h2>
        <button onClick={() => {
            dispatch({ type: reviewLike })
        }}>Like</button>
        <button onClick={() => {
            dispatch({ type: reviewDislike })
        }}>dislike</button>
    </div>
}


const App = () => {
    return <Provider store={appStore}>
        <Counter />
        <hr />
        <Review />
    </Provider>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
.....................................................................................
.....................................................................................
			 Modern Reducer syntax
....................................................................................


Old way:

const IncrementReducer = (state = { counter: 10 }, action) => {
    //biz logic
    switch (action.type) {
        case incrementBy:
            return produce(state, (draft) => {
                draft.counter += action.payload
            })
        default:
            //default state
            return state;
    }

}

Redux Toolkit way:

1.using createReducer function
2.using createSlice function

2.1.Using createReducer api

1.It is utillity function from redux-toolkit.
2.It reduces lot of boiler plate code , provides standards based coding
3.It is offering built in immer js api,so, no need of using "produce" directly..
4.No need of switch..case and actions...

createReducer api coding has  pattern

1.builder pattern

Syntax:

const reducer= createReducer(initialState,(builder)=>{

     builder.addCase(actionName,(state,action)=>{
     //immer js code: produce function is built in
      state.value++
    }).addCase(actionName,(state,action)=>{
     //immer js code: produce function is built in
      state.value++
   }).addDefaultCase((state,action)=>{})

})


import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { configureStore, createSlice } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'

const counterSlice = createSlice({
    name: 'counter',
    initialState: { value: 0 },
    reducers: {
        //plain js function
        increment(state, action) {
            //immer js produce logic
            state.value++
        },
        decrement(state, action) {
            state.value--
        }
    }
})
//extract reducers
const CounterReducer = counterSlice.reducer
//Extract actions (actionCreator) from the slice
const { increment, decrement } = counterSlice.actions

//create store object
const appStore = configureStore({
    reducer: {
        counter: CounterReducer
    }
})
///////////////////////////////////////////////////////////////////////////////////////
//React component layer
const Counter = (props) => {
    const counter = useSelector(state => {
        return state.counter
    })
    const dispatch = useDispatch()
    return <div>
        <h1>React Redux</h1>
        <h2>Counter {counter.value}</h2>
        <button onClick={() => {
            dispatch({ type: increment })
        }}>+</button>
        <button onClick={() => {
            dispatch({ type: decrement })
        }}>-</button>
    </div>
}



const App = () => {
    return <Provider store={appStore}>
        <Counter />
    </Provider>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
.....................................................................................
	....................................................................................
			     Middlewares
...................................................................................
What is middleware?
 Middleware is collection of functions, used for some cross cutting concerns...

eg:
logging
TimeTravel
async task

configureStore(middleware:[])
/**
   * An array of Redux middleware to install. If not supplied, defaults to
   * the set of middleware returned by `getDefaultMiddleware()`.
   */
middleware?: ((getDefaultMiddleware: CurriedGetDefaultMiddleware<S>) => M) | M

This function has already default middlewars
1.Immutability check middleware
2.Serializability check middleware
3.Action creator check middleware
4.thunk

 +

Your middlewares

To add Middleware

Way 1:

const middlewares = [thunk,immutableStateInvariant,seralizableStateInvariant]

configureStore({
 middleware: middlewares
})

way 2:
configureStore({
 middleware: (getDefaultMiddleware)=>getDefaultMiddleware().concat(yourMiddleware)
})

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { configureStore, createSlice } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import logger from 'redux-logger'

const counterSlice = createSlice({
    name: 'counter',
    initialState: { value: 0 },
    reducers: {
        //plain js function
        increment(state, action) {
            //immer js produce logic
            state.value++
        },
        decrement(state, action) {
            state.value--
        }
    }
})
//extract reducers
const CounterReducer = counterSlice.reducer
//Extract actions (actionCreator) from the slice
const { increment, decrement } = counterSlice.actions

//create store object
const appStore = configureStore({
    reducer: {
        counter: CounterReducer
    },
    middleware: (getDefaultMiddleware => getDefaultMiddleware().concat(logger))
})
///////////////////////////////////////////////////////////////////////////////////////
//React component layer
const Counter = (props) => {
    const counter = useSelector(state => {
        return state.counter
    })
    const dispatch = useDispatch()
    return <div>
        <h1>React Redux</h1>
        <h2>Counter {counter.value}</h2>
        <button onClick={() => {
            dispatch({ type: increment })
        }}>+</button>
        <button onClick={() => {
            dispatch({ type: decrement })
        }}>-</button>
    </div>
}



const App = () => {
    return <Provider store={appStore}>
        <Counter />
    </Provider>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)
....................................................................................
			 REST API CALLS INSIDE Redux
....................................................................................
After integrating redux with react, all api logic should be part of redux

import { StrictMode, useEffect } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import { configureStore, createSlice, createAsyncThunk } from '@reduxjs/toolkit'
import { Provider, useDispatch, useSelector } from 'react-redux'
import logger from 'redux-logger'


const initialState = {
    entities: [],
    loading: false,
}

//thunk middleware
const getPosts = createAsyncThunk('posts/getPosts', async (thunkAPI) => {
    const res = await fetch('https://jsonplaceholder.typicode.com/posts')
    const posts = await res.json()
    return posts
})

//slice
const postSlice = createSlice({
    name: 'posts',
    initialState,
    reducers: {},
    extraReducers(builder) {
        builder.addCase(getPosts.pending, (state, action) => {
            state.loading = true
        }).addCase(getPosts.fulfilled, (state, { payload }) => {
            state.loading = false
            state.entities = payload
        }).addCase(getPosts.rejected, (state, action) => {
            state.loading = false
        })
    }

})

const postReducer = postSlice.reducer


//create store object
const appStore = configureStore({
    reducer: {
        posts: postReducer
    },
    middleware: (getDefaultMiddleware => getDefaultMiddleware().concat(logger))
})
///////////////////////////////////////////////////////////////////////////////////////
//React component layer

const Post = () => {
    const dispatch = useDispatch()
    const { entities, loading } = useSelector((state) => state.posts)

    useEffect(() => {
        dispatch(getPosts())
    }, [])

    return (
        <div>
            <h2>Blog Posts</h2>
            {entities.map((post) => (
                <p key={post.id}>{post.title}</p>
            ))}
        </div>
    )
}


const App = () => {
    return <Provider store={appStore}>
        <Post />
    </Provider>
}

createRoot(document.getElementById('root')).render(
    <StrictMode>
        <App />
    </StrictMode>,
)












