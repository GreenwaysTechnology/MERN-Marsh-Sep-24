Topics:

Java SCRIPT FUNDAMENTALS – 4 HRS

Getting Started
      Introduction to JavaScript language
      JavaScript language compiler and runtime architecture
      JavaScript version history
      ECMA Script overview 

Language Fundamentals
      Variables
      Literals 
      Type system
      Let,var,const 
      Operators 
      Advanced boolean literals
      Control statements and loops
Functions
      Function declaration and invocation
      Function args and parameters
      Positional args and parameters
      Default args
Functional Programming concepts
      Function as literal
      Higher order function
      Anonymous function
      Passing function as Parameters
      Returning function from Function
      Arrow functions
Object based Programming and implementation
      What is object
      Creating objects 
      Using constructors patterns
      Using literal pattern
      Inheritance
      Has-a relationship
      Arrays
      JSON Parsing
.....................................................................................
			What is javascript?
   
Javascript is Object based,functional style programming language.

Javascript is hybrid language which uses two programming styles.

Object based vs Object oriented:
................................
OO features:

1.Abstraction
2.Encapsulation
3.Hierachy
4.Typing
5.Modularity
................
if any language follows these principles 100%, those languages are called object oriented language.
eg: C++,java,C#,scala

if any language does not follow these principles 100% or all prinicples partially
those languages are called "Object based Language"

6.Persistency
7.Concurrency

functional style:
  if any follows functional programming language principles 100% , those languages are called "Pure Functional Programming language"  or functional style.

....................................................................................
			Javascript compilation and runtime arch
....................................................................................

Java:
 source code : hello.java
 compile code : hello.class
 execution : The runtime called jvm which converts compiled code into native code.

JS:
 source code : hello.js
	|
  Javascript runtime -  program written in c language/c++
      Components of js runtime

    Loader - load js file(source code) into runtime
     |
    parser  - Lexcial Parser- before compilation, code will be converted into
	       lexical format (string tree).
     |
   compiler - compiler converts lexical code into "Assembly instructions" - this is               called byte code  
...............
     | -Runtime 
   Interpreter - converts byte code into machine instructions
     |
    JIT compiler - to help interpreter to boost execution speed
     |
 ..............................................................................
			  Types of js runtime
................................................................................

Runtime types are based on the where we use js.

JS invented for browser , so primary runtime is within every web browser.

Chrome- V8
IE/Edge-Charka
Firefox - Spider Monkey

Js runtime is available outside browser- Node.js

Node.js is javascript runtime and platform which is built on the top of "V8"

Js engines are available inside many other systems like mobile,other devices too..
....................................................................................
			ECMA Script /ES
...................................................................................
Javascript language created for browsers in 1995 for building dynamic web pages by NetsCap Communication.

After javascript language created, the language was submitted to standard body called
"ECMA" international

After submission, the language was standarized and released by committee.

1.ES 1.0 -->1996
2.ES 3.0 -->1999
3.ES 4.0 -->2006
4.ES 5.0 --->2007
5.ES 6.0 --->2012-2015
6.ES 7.0 ----->2016
etc.....
....................................................................................
			 ECMA 6 /ES 6
...................................................................................

Learning Path:
1.language fundamentals
  -variables
  -literals
  -types

Project Setup:
.............
G:\Marsh\Javascript>mkdir es-app

G:\Marsh\Javascript>cd es-app

G:\Marsh\Javascript\es-app>mkdir src

G:\Marsh\Javascript\es-app>code .

How to run/test js code?

You can test in browser and also on node.

Browser:
........

js-apps/
  src
    -index.js
 index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h1>Js app</h1>
    <script src="src/index.js"></script>
</body>
</html>

How to run this html?
 we need some webserver, vs code has built in webserver, that need to be installed.

go to vs code "extension", type "live server" and install, and restart vs code.

Right click on index.html, run on live  server.
..................................................................................

1.variable declarations

var,let,const -keywords to declare variables
 
 let /const - es 6 keywords
eg:
 let firstName

2.literals -values
   strings,numbers,boolean,undefined,NaN,infinity,function,null,object

3.Data types
   js is dynamic typed language-the type of variable is understood only during runtime.
  int a =10 - strongly typed -c,c++,java,C#
  let a =20 - dynamic typed -js,python..

  literal   - type
 ....................
  string    - string
  number    - number
  boolean   - boolean
  undfined  - undefined
  NaN       - number
  Infinity  - number
  function  - function
  object    - object
  null      - object

....................................................................................
				Variables,data types,Literals
.....................................................................................

JS is dynamically typed,so type is not declared in advance, type of variables are decided during runtime, based on "literals-values"

Js has 9 literals but only 6 types.

strings,numbers,boolean,undefined,object,function- types


Strings:

strings : "",'',``,`${}`(interpolation)

//strings

let firstName = "Subramanian"
let lastName = 'Murugan';
console.log(firstName + lastName)
//back tick notation:
//for string concatnation
let fullName = firstName + lastName //old way
fullName = `${firstName} ${lastName}`
console.log("Name " + fullName)
console.log("Name", fullName)
console.log(`Name ${fullName}`)

//multi line strings
let doc = `
   <html>
      <head>
          <title></title>
      </head>
    <body>
    </body>
 </html>
`
console.log(doc)

Numbers:
 only type called number 
 64 bit aka double.

//numbers
let a = 10
let b = 20
let c = a + b 
console.log(`c ${c}`)


Booleans:
 true or false

//true or false 


Undefined:
 Variable is declared without any valid value.

let price;
console.log(`Price is ${price}`)


NaN : Not a Number

NaN is number only which represents "error".
If you do any numerical computation, if computation is failed you will get NaN.
NaN is kind of "error".
if you get NaN you have to fix beacuse is bug

NaN Use case:
if you do computation against undefined values, you get NaN.

let price;
let qty = 100;
let totalPrice = price * qty; //undefined * 100
console.log(`Total Price is ${totalPrice}`)


Infinity:
  Div/0
//infnity
let price = 100;
let avgPrice = price / 0
console.log(`Avg Price ${avgPrice}`)


..................................................................................
			Advanced Boolean
..................................................................................
What can be true or false?

decision making : if..else ,tenary operator

  "in javascript is every thing is true execept the following values"


Falsy values
 * 
 *  1.boolean false
 *  2.Empty string "" ,''
 *  3.0
 *  4.undefined
 *  5.NaN
 *  6.null
 */

let a = 0

if (a) {
    console.log('good')
} else {
    console.log('bad')
}

let message = 'Hello'

if (message) {
    console.log(message)
} else {
    console.log('wrong')
}
message = ''
if (message) {
    console.log(message)
} else {
    console.log('wrong')
}
let myvar;
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`MyVar is false: ${myvar}`)
}
myvar = 0
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`MyVar is false: ${myvar}`)
}
myvar = false
if (myvar) {
    console.log(`MyVar is ${myvar}`)
} else {
    console.log(`MyVar is false: ${myvar}`)
}
.....................................................................................

				Operator -Equal
.....................................................................................

== ->Double equal
=== ->Triple equal
!=
!==
		
let a = 10;
let b = 10;

if (a == b) {
    console.log('a and b are equal')
} else {
    console.log('a and b are not equal')
}

let x = 10;
let y = "10"

if (x == y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}


if (x === y) {
    console.log('x and y are equal')
} else {
    console.log('x and y are not equal')
}

Tenary Operator:
...............

//tenary operator

let a = 10

let result = a ? "hello" : "hai"
console.log(result)

let b
result = b ? "hello" : "hai"
console.log(result)

.....................................................................................

const:
   it is read only where as let is reassignable.
			
//let vs const

let a = 10;
console.log(`a ${a}`)
a = 20
console.log(`a ${a}`)

const b =10;
console.log(`b ${b}`)
b=90

.....................................................................................
			   Functions
....................................................................................

functions are building block of javascript language.
functions encapsulate the logic of application.
functions may take args and return values

.....................................................................................
			   Functions
....................................................................................

functions are building block of javascript language.
functions encapsulate the logic of application.
functions may take args and return values


//basic function declaration

function sayHello() {
    console.log('hello')
}
//invoke function 
sayHello()


Function args and parameters:
.............................

//args and parameters 

function add(a, b) {
    let c = a + b
    console.log(`c ${c}`)
}
add(10, 10) 

Default args and parameters:
//default args
function add(a = 0, b = 0) {
    console.log(`a ${a} b ${b}`)
    let c = a + b
    console.log(`c ${c}`)
}
add(10, 10)
add()

Return Values:
//default args
function add(a = 0, b = 0) {
    console.log(`a ${a} b ${b}`)
    return a + b
}
console.log(add(10, 10))
console.log(add())
.....................................................................................
			Functional Programming principles
.....................................................................................

Functional programming principle is one of the programming style,

Functional programming is the first programming principle introduced in 1950's from the mathmeticas called "Lambda Calculs"

LISP is first functional programming language and mother of all functional programming language..

java script and functional programming principle:

1.function is first class citizen
   function is value like other values numbers,strings,boolean

 let a=10 - here is 10 value and its type number

 function is also value,we can store function into variable, can be passed as parameter to other function, and also we can return function as value from the other function.

           if function is stored into a variable, that variable can be used to 
		     invoke that function


1.function as value


//function declaration

function sayHello(name = 'default') {
    console.log('hello', name)
}
sayHello('admin')

//variable syntax:
let hello = sayHello;
hello('admin')

//variable and function literal in the same place

//greet is just variable
//function(){} is value
//no name for the function : anonymous function
let greet = function () {
    console.log('greet')
}
greet()

//anonymous function args and parameters
let add = function (a = 0, b = 0) {
    let c = a + b
    console.log(c)
}
add(10, 0)

//anonymoust function args,parameters,return
let multiply = function (a = 0, b = 0) {
    return a * b
}
console.log(multiply(10, 10))
...................................................................................
			Higher order function
..................................................................................

function is passed as parameter to another function.
functoion is returned from the another function 


function is passed as parameter to another function:
....................................................
//function which receives another function as arg
function add(a, b) {
    return a + b
}
//passing values
//via variables
let x = 10
let y = 20
console.log(add(x, y))

//via values
console.log(add(10, 45))
//////////////////////////////////////////////////////////////////////////////////

function greet(myvar) {
    myvar()
}
let hello = function () {
    console.log('hello')
}
greet(hello)

//pass function directly
greet(function () {
    console.log('welcome')
})
//////////////////////////////////////////////////////////////////////////////////////


// function connect(cb) {
//     cb('connected')
// }
let connect = function (cb) {
    cb('connected')
}

connect(function (message) {
    console.log(message)
});
/////////////////////////////////////////////////////////////////////////////////////


let login = function (userName, password, success, failure) {
    if (userName === 'admin' && password === 'admin') {
        success('login success')
    } else {
        failure('login failed')
    }
}

login('admin', 'admin', function (status) {
    console.log(status)
}, function (err) {
    console.log(err)
})
login('foo', 'bar', function (status) {
    console.log(status)
}, function (err) {
    console.log(err)
})
.....................................................................................
		
As of now we have written hof in es 5 style, old style, IN es6 new syntax is introduced for "anonymous functions" - Arrow functions

			Arrow Function


Arrow functions are refactored version of es 5 anonymous functions 


//es 5 anonymous function

let hello = function () {
    console.log('hello')
}
hello()
//es 6 arrow anonymous function 
let hai = () => {
    console.log('hai')
}
hai()

//arrow function code refactoring 

//1. if function has single line of code,you can remove {}
hai = () => console.log('hai')
hai()

//1.arrow functions and parameters

let add = (a = 0, b = 0) => {
    return a + b
}
console.log(add(1, 2))

//only return statement: we can remove {} and return statement
add = (a = 0, b = 0) => a + b

console.log(add(1, 2))

//if function has single arg, no default value,return the same .
let stock = (value) => {
    return value
}
//you can remove {},return,()
stock = value => value

console.log(stock(10))
.....................................................................................
			 Arrorw and Higher order
....................................................................................


let connect = function (cb) {
    cb('connected')
}
connect(function (status) {
    console.log(status)
})
//arrow

connect = cb => cb('connected')

// connect((status) => {
//     console.log(status)
// })
connect(status => console.log(status))


let login = (userName, password, success, failure) => {
    if (userName === 'admin' && password === 'admin') {
        success('login success')
    } else {
        failure('login failed')
    }
}

login('admin', 'admin', (status) => {
    console.log(status)
}, (err) => {
    console.log(err)
})

login('admin', 'admin', status => console.log(status), err => console.log(err))
.....................................................................................
				  Objects
.....................................................................................			
Objects can be created in two ways

1.constructors pattern
   es 5 functions 
   es 6 classes
2.literal pattern

e6 class:
........
 
instance variables,methods,constructor intialization,object creation
....................................................................


//es 6 class 

class Employee {
    //instance variable
    id = 10
    name = 'Subramanian'

    //methods
    calculate() {
        return 100
    }
    calculateSalary = () => {
        return 1000
    }

}

//create instance

//let is keyword
//employee is just reference variable
//new is operator 
//Employee() is constructor call
let employee = new Employee();

//how to access variables and methods
console.log(employee.id , employee.name)
console.log(employee.calculate())
console.log(employee.calculateSalary())


State/Instance variable initalization:

1.inside class
2.outside class after object creation.
3.inside constructor and parameters


2.After Object Creation

//es 6 class 

class Employee {
    //instance variable
    id = 10
    name = 'Subramanian'

    //methods
    calculate() {
        return 100
    }
    calculateSalary = () => {
        return 1000
    }

}

let employee = new Employee();

//initalize the variable
employee.id = 1000
employee.name = 'Ram'

//how to access variables and methods
console.log(employee.id, employee.name)
console.log(employee.calculate())
console.log(employee.calculateSalary())

..........................


Constructors and parameters:

//es 6 class 

class Employee {
    //instance variable
    id
    name
    //constructor 
    constructor(id = 0, name = 'name') {
        this.id = id
        this.name = name
    }
    //methods
    calculate() {
        return 100
    }
    calculateSalary = () => {
        return 1000
    }

}

let employee = new Employee(1, 'Subramanian');
console.log(employee.id, employee.name)
console.log(employee.calculate())
console.log(employee.calculateSalary())

employee = new Employee();
console.log(employee.id, employee.name)
console.log(employee.calculate())
console.log(employee.calculateSalary())
....................................................................................
			Hierachy
....................................................................................

There are two types of hierachy

1.has-a -composition
2.is-a - inheritance


HAS-A:

class Address {
    city
    state
    constructor(state = "state", city = "city") {
        this.state = state
        this.city = city
    }
}
class Employee {
    id
    name
    address
    constructor(id = 0, name = 'name', address = new Address()) {
        this.id = id
        this.name = name
        this.address = address
    }
}
//
let employee = new Employee()
console.log(employee)

employee = new Employee(1, 'Subramanian', new Address('TN', 'Coimbatore'))
console.log(employee)

IS-A : Inheritance:
...................
Prototypical inheritance:
.........................

class A{ } 
class B extends A {}


class Account {
    constructor() {
        console.log('Account constructor is called')
    }
}
class SavingsAccount extends Account {
    constructor() {
        super()
        console.log('Savings Account constructor is called')
    }
}
let sb = new SavingsAccount()

Overriding/Redefining:
.....................

class Account {
    constructor() {
        console.log('Account constructor is called')
    }
    deposit() {
        return 10
    }

}
class SavingsAccount extends Account {
    constructor() {
        super()
        console.log('Savings Account constructor is called')
    }
    deposit(){
        return 100 + super.deposit()
    }
}
let sb = new SavingsAccount()
console.log(sb.deposit())
.....................................................................................
			Literal Objects
.....................................................................................
No Class,No function to creation

syntax:

let variable = {
   key:value (can be any literal -string,numbers,boolean,another object,array
}	


let employee = {
    id: 1,
    name: 'Subramanian',
    status: true
}
console.log(employee.id,employee.name,employee.status)
console.log(employee)

has-a:nested object:
....................
//has-a
let inventory = {
    item: 'journal',
    qty: 25,
    size: { h: 14, w: 21, uom: 'cm' },
    status: 'A'
}
console.log(inventory)
....................................................................................
			Java script built in objects

JS offers plenty of builtin objects

Object classification:

1.POJOS - Plain old javascript object
2.DOM objects- Browser related objects- UI

POJOS:

1.Object
  It is super class in js

2.Wrapper classes/Objects
  String,Number,Boolean,Function,Object

3.DataStructure
  Array,Set,Map
  Array is dynamic

4.Parser Object 
   JSON
5.Others
  Date,Math,Symbol,XHR,etc...


Array:
 It is object, which is dynamic
 Since array is object, which has lot of methods

 Array can hold any type of data


//array with simple data
let list = ['a', 'b', 'c']
//iterate
list.forEach(item => console.log(item))

let employees = [
    {
        id: 1,
        name: 'a'
    },
    {
        id: 2,
        name: 'b'
    }
]
employees.forEach(emp => console.log(emp))

let inventory = [
    { item: 'journal', qty: 25, status: 'A' },
    { item: 'notebook', qty: 50, status: 'A' },
    { item: 'paper', qty: 100, status: 'D' }
]
console.log(inventory)

....................................................................................
			JSON
...................................................................................

let inventory = [
    { item: 'journal', qty: 25, status: 'A' },
    { item: 'notebook', qty: 50, status: 'A' },
    { item: 'paper', qty: 100, status: 'D' }
]

//json- object to string 
const jsonString = JSON.stringify(inventory)

console.log(jsonString)

const jsonObject = JSON.parse(jsonString)

console.log(jsonObject)























